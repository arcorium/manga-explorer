// Code generated by mockery v2.40.1. DO NOT EDIT.

package service

import (
	mail "manga-explorer/internal/infrastructure/mail"

	mock "github.com/stretchr/testify/mock"

	status "manga-explorer/internal/common/status"
)

// MailMock is an autogenerated mock type for the IMail type
type MailMock struct {
	mock.Mock
}

type MailMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MailMock) EXPECT() *MailMock_Expecter {
	return &MailMock_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function with given fields: _a0
func (_m *MailMock) SendEmail(_a0 *mail.Mail) status.Object {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*mail.Mail) status.Object); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// MailMock_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MailMock_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - _a0 *mail.Mail
func (_e *MailMock_Expecter) SendEmail(_a0 interface{}) *MailMock_SendEmail_Call {
	return &MailMock_SendEmail_Call{Call: _e.mock.On("SendEmail", _a0)}
}

func (_c *MailMock_SendEmail_Call) Run(run func(_a0 *mail.Mail)) *MailMock_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mail.Mail))
	})
	return _c
}

func (_c *MailMock_SendEmail_Call) Return(_a0 status.Object) *MailMock_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailMock_SendEmail_Call) RunAndReturn(run func(*mail.Mail) status.Object) *MailMock_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Sender provides a mock function with given fields:
func (_m *MailMock) Sender() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sender")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MailMock_Sender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sender'
type MailMock_Sender_Call struct {
	*mock.Call
}

// Sender is a helper method to define mock.On call
func (_e *MailMock_Expecter) Sender() *MailMock_Sender_Call {
	return &MailMock_Sender_Call{Call: _e.mock.On("Sender")}
}

func (_c *MailMock_Sender_Call) Run(run func()) *MailMock_Sender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MailMock_Sender_Call) Return(_a0 string) *MailMock_Sender_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MailMock_Sender_Call) RunAndReturn(run func() string) *MailMock_Sender_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailMock creates a new instance of MailMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailMock {
	mock := &MailMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
