// Code generated by mockery v2.40.1. DO NOT EDIT.

package repository

import (
	mangas "manga-explorer/internal/domain/mangas"
	infrastructurerepository "manga-explorer/internal/infrastructure/repository"

	mock "github.com/stretchr/testify/mock"
)

// MangaMock is an autogenerated mock type for the IManga type
type MangaMock struct {
	mock.Mock
}

type MangaMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MangaMock) EXPECT() *MangaMock_Expecter {
	return &MangaMock_Expecter{mock: &_m.Mock}
}

// CreateManga provides a mock function with given fields: manga, genres
func (_m *MangaMock) CreateManga(manga *mangas.Manga, genres []mangas.MangaGenre) error {
	ret := _m.Called(manga, genres)

	if len(ret) == 0 {
		panic("no return value specified for CreateManga")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Manga, []mangas.MangaGenre) error); ok {
		r0 = rf(manga, genres)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MangaMock_CreateManga_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManga'
type MangaMock_CreateManga_Call struct {
	*mock.Call
}

// CreateManga is a helper method to define mock.On call
//   - manga *mangas.Manga
//   - genres []mangas.MangaGenre
func (_e *MangaMock_Expecter) CreateManga(manga interface{}, genres interface{}) *MangaMock_CreateManga_Call {
	return &MangaMock_CreateManga_Call{Call: _e.mock.On("CreateManga", manga, genres)}
}

func (_c *MangaMock_CreateManga_Call) Run(run func(manga *mangas.Manga, genres []mangas.MangaGenre)) *MangaMock_CreateManga_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Manga), args[1].([]mangas.MangaGenre))
	})
	return _c
}

func (_c *MangaMock_CreateManga_Call) Return(_a0 error) *MangaMock_CreateManga_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MangaMock_CreateManga_Call) RunAndReturn(run func(*mangas.Manga, []mangas.MangaGenre) error) *MangaMock_CreateManga_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVolume provides a mock function with given fields: volume
func (_m *MangaMock) CreateVolume(volume *mangas.Volume) error {
	ret := _m.Called(volume)

	if len(ret) == 0 {
		panic("no return value specified for CreateVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Volume) error); ok {
		r0 = rf(volume)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MangaMock_CreateVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVolume'
type MangaMock_CreateVolume_Call struct {
	*mock.Call
}

// CreateVolume is a helper method to define mock.On call
//   - volume *mangas.Volume
func (_e *MangaMock_Expecter) CreateVolume(volume interface{}) *MangaMock_CreateVolume_Call {
	return &MangaMock_CreateVolume_Call{Call: _e.mock.On("CreateVolume", volume)}
}

func (_c *MangaMock_CreateVolume_Call) Run(run func(volume *mangas.Volume)) *MangaMock_CreateVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Volume))
	})
	return _c
}

func (_c *MangaMock_CreateVolume_Call) Return(_a0 error) *MangaMock_CreateVolume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MangaMock_CreateVolume_Call) RunAndReturn(run func(*mangas.Volume) error) *MangaMock_CreateVolume_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVolume provides a mock function with given fields: mangaId, volume
func (_m *MangaMock) DeleteVolume(mangaId string, volume uint32) error {
	ret := _m.Called(mangaId, volume)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32) error); ok {
		r0 = rf(mangaId, volume)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MangaMock_DeleteVolume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVolume'
type MangaMock_DeleteVolume_Call struct {
	*mock.Call
}

// DeleteVolume is a helper method to define mock.On call
//   - mangaId string
//   - volume uint32
func (_e *MangaMock_Expecter) DeleteVolume(mangaId interface{}, volume interface{}) *MangaMock_DeleteVolume_Call {
	return &MangaMock_DeleteVolume_Call{Call: _e.mock.On("DeleteVolume", mangaId, volume)}
}

func (_c *MangaMock_DeleteVolume_Call) Run(run func(mangaId string, volume uint32)) *MangaMock_DeleteVolume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint32))
	})
	return _c
}

func (_c *MangaMock_DeleteVolume_Call) Return(_a0 error) *MangaMock_DeleteVolume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MangaMock_DeleteVolume_Call) RunAndReturn(run func(string, uint32) error) *MangaMock_DeleteVolume_Call {
	_c.Call.Return(run)
	return _c
}

// EditManga provides a mock function with given fields: manga
func (_m *MangaMock) EditManga(manga *mangas.Manga) error {
	ret := _m.Called(manga)

	if len(ret) == 0 {
		panic("no return value specified for EditManga")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Manga) error); ok {
		r0 = rf(manga)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MangaMock_EditManga_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditManga'
type MangaMock_EditManga_Call struct {
	*mock.Call
}

// EditManga is a helper method to define mock.On call
//   - manga *mangas.Manga
func (_e *MangaMock_Expecter) EditManga(manga interface{}) *MangaMock_EditManga_Call {
	return &MangaMock_EditManga_Call{Call: _e.mock.On("EditManga", manga)}
}

func (_c *MangaMock_EditManga_Call) Run(run func(manga *mangas.Manga)) *MangaMock_EditManga_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Manga))
	})
	return _c
}

func (_c *MangaMock_EditManga_Call) Return(_a0 error) *MangaMock_EditManga_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MangaMock_EditManga_Call) RunAndReturn(run func(*mangas.Manga) error) *MangaMock_EditManga_Call {
	_c.Call.Return(run)
	return _c
}

// EditMangaGenres provides a mock function with given fields: additional, removes
func (_m *MangaMock) EditMangaGenres(additional []mangas.MangaGenre, removes []mangas.MangaGenre) error {
	ret := _m.Called(additional, removes)

	if len(ret) == 0 {
		panic("no return value specified for EditMangaGenres")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]mangas.MangaGenre, []mangas.MangaGenre) error); ok {
		r0 = rf(additional, removes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MangaMock_EditMangaGenres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditMangaGenres'
type MangaMock_EditMangaGenres_Call struct {
	*mock.Call
}

// EditMangaGenres is a helper method to define mock.On call
//   - additional []mangas.MangaGenre
//   - removes []mangas.MangaGenre
func (_e *MangaMock_Expecter) EditMangaGenres(additional interface{}, removes interface{}) *MangaMock_EditMangaGenres_Call {
	return &MangaMock_EditMangaGenres_Call{Call: _e.mock.On("EditMangaGenres", additional, removes)}
}

func (_c *MangaMock_EditMangaGenres_Call) Run(run func(additional []mangas.MangaGenre, removes []mangas.MangaGenre)) *MangaMock_EditMangaGenres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]mangas.MangaGenre), args[1].([]mangas.MangaGenre))
	})
	return _c
}

func (_c *MangaMock_EditMangaGenres_Call) Return(_a0 error) *MangaMock_EditMangaGenres_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MangaMock_EditMangaGenres_Call) RunAndReturn(run func([]mangas.MangaGenre, []mangas.MangaGenre) error) *MangaMock_EditMangaGenres_Call {
	_c.Call.Return(run)
	return _c
}

// FindMangaFavorites provides a mock function with given fields: userId, pagedQuery
func (_m *MangaMock) FindMangaFavorites(userId string, pagedQuery infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.MangaFavorite], error) {
	ret := _m.Called(userId, pagedQuery)

	if len(ret) == 0 {
		panic("no return value specified for FindMangaFavorites")
	}

	var r0 infrastructurerepository.PagedQueryResult[[]mangas.MangaFavorite]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.MangaFavorite], error)); ok {
		return rf(userId, pagedQuery)
	}
	if rf, ok := ret.Get(0).(func(string, infrastructurerepository.QueryParameter) infrastructurerepository.PagedQueryResult[[]mangas.MangaFavorite]); ok {
		r0 = rf(userId, pagedQuery)
	} else {
		r0 = ret.Get(0).(infrastructurerepository.PagedQueryResult[[]mangas.MangaFavorite])
	}

	if rf, ok := ret.Get(1).(func(string, infrastructurerepository.QueryParameter) error); ok {
		r1 = rf(userId, pagedQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MangaMock_FindMangaFavorites_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMangaFavorites'
type MangaMock_FindMangaFavorites_Call struct {
	*mock.Call
}

// FindMangaFavorites is a helper method to define mock.On call
//   - userId string
//   - pagedQuery infrastructurerepository.QueryParameter
func (_e *MangaMock_Expecter) FindMangaFavorites(userId interface{}, pagedQuery interface{}) *MangaMock_FindMangaFavorites_Call {
	return &MangaMock_FindMangaFavorites_Call{Call: _e.mock.On("FindMangaFavorites", userId, pagedQuery)}
}

func (_c *MangaMock_FindMangaFavorites_Call) Run(run func(userId string, pagedQuery infrastructurerepository.QueryParameter)) *MangaMock_FindMangaFavorites_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(infrastructurerepository.QueryParameter))
	})
	return _c
}

func (_c *MangaMock_FindMangaFavorites_Call) Return(_a0 infrastructurerepository.PagedQueryResult[[]mangas.MangaFavorite], _a1 error) *MangaMock_FindMangaFavorites_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MangaMock_FindMangaFavorites_Call) RunAndReturn(run func(string, infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.MangaFavorite], error)) *MangaMock_FindMangaFavorites_Call {
	_c.Call.Return(run)
	return _c
}

// FindMangaHistories provides a mock function with given fields: userId, pagedQuery
func (_m *MangaMock) FindMangaHistories(userId string, pagedQuery infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.MangaHistory], error) {
	ret := _m.Called(userId, pagedQuery)

	if len(ret) == 0 {
		panic("no return value specified for FindMangaHistories")
	}

	var r0 infrastructurerepository.PagedQueryResult[[]mangas.MangaHistory]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.MangaHistory], error)); ok {
		return rf(userId, pagedQuery)
	}
	if rf, ok := ret.Get(0).(func(string, infrastructurerepository.QueryParameter) infrastructurerepository.PagedQueryResult[[]mangas.MangaHistory]); ok {
		r0 = rf(userId, pagedQuery)
	} else {
		r0 = ret.Get(0).(infrastructurerepository.PagedQueryResult[[]mangas.MangaHistory])
	}

	if rf, ok := ret.Get(1).(func(string, infrastructurerepository.QueryParameter) error); ok {
		r1 = rf(userId, pagedQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MangaMock_FindMangaHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMangaHistories'
type MangaMock_FindMangaHistories_Call struct {
	*mock.Call
}

// FindMangaHistories is a helper method to define mock.On call
//   - userId string
//   - pagedQuery infrastructurerepository.QueryParameter
func (_e *MangaMock_Expecter) FindMangaHistories(userId interface{}, pagedQuery interface{}) *MangaMock_FindMangaHistories_Call {
	return &MangaMock_FindMangaHistories_Call{Call: _e.mock.On("FindMangaHistories", userId, pagedQuery)}
}

func (_c *MangaMock_FindMangaHistories_Call) Run(run func(userId string, pagedQuery infrastructurerepository.QueryParameter)) *MangaMock_FindMangaHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(infrastructurerepository.QueryParameter))
	})
	return _c
}

func (_c *MangaMock_FindMangaHistories_Call) Return(_a0 infrastructurerepository.PagedQueryResult[[]mangas.MangaHistory], _a1 error) *MangaMock_FindMangaHistories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MangaMock_FindMangaHistories_Call) RunAndReturn(run func(string, infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.MangaHistory], error)) *MangaMock_FindMangaHistories_Call {
	_c.Call.Return(run)
	return _c
}

// FindMangasByFilter provides a mock function with given fields: filter, pagedQuery
func (_m *MangaMock) FindMangasByFilter(filter *mangas.SearchFilter, pagedQuery infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Manga], error) {
	ret := _m.Called(filter, pagedQuery)

	if len(ret) == 0 {
		panic("no return value specified for FindMangasByFilter")
	}

	var r0 infrastructurerepository.PagedQueryResult[[]mangas.Manga]
	var r1 error
	if rf, ok := ret.Get(0).(func(*mangas.SearchFilter, infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Manga], error)); ok {
		return rf(filter, pagedQuery)
	}
	if rf, ok := ret.Get(0).(func(*mangas.SearchFilter, infrastructurerepository.QueryParameter) infrastructurerepository.PagedQueryResult[[]mangas.Manga]); ok {
		r0 = rf(filter, pagedQuery)
	} else {
		r0 = ret.Get(0).(infrastructurerepository.PagedQueryResult[[]mangas.Manga])
	}

	if rf, ok := ret.Get(1).(func(*mangas.SearchFilter, infrastructurerepository.QueryParameter) error); ok {
		r1 = rf(filter, pagedQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MangaMock_FindMangasByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMangasByFilter'
type MangaMock_FindMangasByFilter_Call struct {
	*mock.Call
}

// FindMangasByFilter is a helper method to define mock.On call
//   - filter *mangas.SearchFilter
//   - pagedQuery infrastructurerepository.QueryParameter
func (_e *MangaMock_Expecter) FindMangasByFilter(filter interface{}, pagedQuery interface{}) *MangaMock_FindMangasByFilter_Call {
	return &MangaMock_FindMangasByFilter_Call{Call: _e.mock.On("FindMangasByFilter", filter, pagedQuery)}
}

func (_c *MangaMock_FindMangasByFilter_Call) Run(run func(filter *mangas.SearchFilter, pagedQuery infrastructurerepository.QueryParameter)) *MangaMock_FindMangasByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.SearchFilter), args[1].(infrastructurerepository.QueryParameter))
	})
	return _c
}

func (_c *MangaMock_FindMangasByFilter_Call) Return(_a0 infrastructurerepository.PagedQueryResult[[]mangas.Manga], _a1 error) *MangaMock_FindMangasByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MangaMock_FindMangasByFilter_Call) RunAndReturn(run func(*mangas.SearchFilter, infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Manga], error)) *MangaMock_FindMangasByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// FindMangasById provides a mock function with given fields: ids
func (_m *MangaMock) FindMangasById(ids ...string) ([]mangas.Manga, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindMangasById")
	}

	var r0 []mangas.Manga
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) ([]mangas.Manga, error)); ok {
		return rf(ids...)
	}
	if rf, ok := ret.Get(0).(func(...string) []mangas.Manga); ok {
		r0 = rf(ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mangas.Manga)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MangaMock_FindMangasById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMangasById'
type MangaMock_FindMangasById_Call struct {
	*mock.Call
}

// FindMangasById is a helper method to define mock.On call
//   - ids ...string
func (_e *MangaMock_Expecter) FindMangasById(ids ...interface{}) *MangaMock_FindMangasById_Call {
	return &MangaMock_FindMangasById_Call{Call: _e.mock.On("FindMangasById",
		append([]interface{}{}, ids...)...)}
}

func (_c *MangaMock_FindMangasById_Call) Run(run func(ids ...string)) *MangaMock_FindMangasById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MangaMock_FindMangasById_Call) Return(_a0 []mangas.Manga, _a1 error) *MangaMock_FindMangasById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MangaMock_FindMangasById_Call) RunAndReturn(run func(...string) ([]mangas.Manga, error)) *MangaMock_FindMangasById_Call {
	_c.Call.Return(run)
	return _c
}

// FindMinimalMangaById provides a mock function with given fields: id
func (_m *MangaMock) FindMinimalMangaById(id string) (*mangas.Manga, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindMinimalMangaById")
	}

	var r0 *mangas.Manga
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mangas.Manga, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *mangas.Manga); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mangas.Manga)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MangaMock_FindMinimalMangaById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMinimalMangaById'
type MangaMock_FindMinimalMangaById_Call struct {
	*mock.Call
}

// FindMinimalMangaById is a helper method to define mock.On call
//   - id string
func (_e *MangaMock_Expecter) FindMinimalMangaById(id interface{}) *MangaMock_FindMinimalMangaById_Call {
	return &MangaMock_FindMinimalMangaById_Call{Call: _e.mock.On("FindMinimalMangaById", id)}
}

func (_c *MangaMock_FindMinimalMangaById_Call) Run(run func(id string)) *MangaMock_FindMinimalMangaById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MangaMock_FindMinimalMangaById_Call) Return(_a0 *mangas.Manga, _a1 error) *MangaMock_FindMinimalMangaById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MangaMock_FindMinimalMangaById_Call) RunAndReturn(run func(string) (*mangas.Manga, error)) *MangaMock_FindMinimalMangaById_Call {
	_c.Call.Return(run)
	return _c
}

// FindRandomMangas provides a mock function with given fields: limit
func (_m *MangaMock) FindRandomMangas(limit uint64) ([]mangas.Manga, error) {
	ret := _m.Called(limit)

	if len(ret) == 0 {
		panic("no return value specified for FindRandomMangas")
	}

	var r0 []mangas.Manga
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]mangas.Manga, error)); ok {
		return rf(limit)
	}
	if rf, ok := ret.Get(0).(func(uint64) []mangas.Manga); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mangas.Manga)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MangaMock_FindRandomMangas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRandomMangas'
type MangaMock_FindRandomMangas_Call struct {
	*mock.Call
}

// FindRandomMangas is a helper method to define mock.On call
//   - limit uint64
func (_e *MangaMock_Expecter) FindRandomMangas(limit interface{}) *MangaMock_FindRandomMangas_Call {
	return &MangaMock_FindRandomMangas_Call{Call: _e.mock.On("FindRandomMangas", limit)}
}

func (_c *MangaMock_FindRandomMangas_Call) Run(run func(limit uint64)) *MangaMock_FindRandomMangas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MangaMock_FindRandomMangas_Call) Return(_a0 []mangas.Manga, _a1 error) *MangaMock_FindRandomMangas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MangaMock_FindRandomMangas_Call) RunAndReturn(run func(uint64) ([]mangas.Manga, error)) *MangaMock_FindRandomMangas_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMangaFavorite provides a mock function with given fields: favorite
func (_m *MangaMock) InsertMangaFavorite(favorite *mangas.MangaFavorite) error {
	ret := _m.Called(favorite)

	if len(ret) == 0 {
		panic("no return value specified for InsertMangaFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.MangaFavorite) error); ok {
		r0 = rf(favorite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MangaMock_InsertMangaFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMangaFavorite'
type MangaMock_InsertMangaFavorite_Call struct {
	*mock.Call
}

// InsertMangaFavorite is a helper method to define mock.On call
//   - favorite *mangas.MangaFavorite
func (_e *MangaMock_Expecter) InsertMangaFavorite(favorite interface{}) *MangaMock_InsertMangaFavorite_Call {
	return &MangaMock_InsertMangaFavorite_Call{Call: _e.mock.On("InsertMangaFavorite", favorite)}
}

func (_c *MangaMock_InsertMangaFavorite_Call) Run(run func(favorite *mangas.MangaFavorite)) *MangaMock_InsertMangaFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.MangaFavorite))
	})
	return _c
}

func (_c *MangaMock_InsertMangaFavorite_Call) Return(_a0 error) *MangaMock_InsertMangaFavorite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MangaMock_InsertMangaFavorite_Call) RunAndReturn(run func(*mangas.MangaFavorite) error) *MangaMock_InsertMangaFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// ListMangas provides a mock function with given fields: parameter
func (_m *MangaMock) ListMangas(parameter infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Manga], error) {
	ret := _m.Called(parameter)

	if len(ret) == 0 {
		panic("no return value specified for ListMangas")
	}

	var r0 infrastructurerepository.PagedQueryResult[[]mangas.Manga]
	var r1 error
	if rf, ok := ret.Get(0).(func(infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Manga], error)); ok {
		return rf(parameter)
	}
	if rf, ok := ret.Get(0).(func(infrastructurerepository.QueryParameter) infrastructurerepository.PagedQueryResult[[]mangas.Manga]); ok {
		r0 = rf(parameter)
	} else {
		r0 = ret.Get(0).(infrastructurerepository.PagedQueryResult[[]mangas.Manga])
	}

	if rf, ok := ret.Get(1).(func(infrastructurerepository.QueryParameter) error); ok {
		r1 = rf(parameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MangaMock_ListMangas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMangas'
type MangaMock_ListMangas_Call struct {
	*mock.Call
}

// ListMangas is a helper method to define mock.On call
//   - parameter infrastructurerepository.QueryParameter
func (_e *MangaMock_Expecter) ListMangas(parameter interface{}) *MangaMock_ListMangas_Call {
	return &MangaMock_ListMangas_Call{Call: _e.mock.On("ListMangas", parameter)}
}

func (_c *MangaMock_ListMangas_Call) Run(run func(parameter infrastructurerepository.QueryParameter)) *MangaMock_ListMangas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(infrastructurerepository.QueryParameter))
	})
	return _c
}

func (_c *MangaMock_ListMangas_Call) Return(_a0 infrastructurerepository.PagedQueryResult[[]mangas.Manga], _a1 error) *MangaMock_ListMangas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MangaMock_ListMangas_Call) RunAndReturn(run func(infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Manga], error)) *MangaMock_ListMangas_Call {
	_c.Call.Return(run)
	return _c
}

// PatchManga provides a mock function with given fields: manga
func (_m *MangaMock) PatchManga(manga *mangas.Manga) error {
	ret := _m.Called(manga)

	if len(ret) == 0 {
		panic("no return value specified for PatchManga")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Manga) error); ok {
		r0 = rf(manga)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MangaMock_PatchManga_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchManga'
type MangaMock_PatchManga_Call struct {
	*mock.Call
}

// PatchManga is a helper method to define mock.On call
//   - manga *mangas.Manga
func (_e *MangaMock_Expecter) PatchManga(manga interface{}) *MangaMock_PatchManga_Call {
	return &MangaMock_PatchManga_Call{Call: _e.mock.On("PatchManga", manga)}
}

func (_c *MangaMock_PatchManga_Call) Run(run func(manga *mangas.Manga)) *MangaMock_PatchManga_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Manga))
	})
	return _c
}

func (_c *MangaMock_PatchManga_Call) Return(_a0 error) *MangaMock_PatchManga_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MangaMock_PatchManga_Call) RunAndReturn(run func(*mangas.Manga) error) *MangaMock_PatchManga_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveMangaFavorite provides a mock function with given fields: favorite
func (_m *MangaMock) RemoveMangaFavorite(favorite *mangas.MangaFavorite) error {
	ret := _m.Called(favorite)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMangaFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.MangaFavorite) error); ok {
		r0 = rf(favorite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MangaMock_RemoveMangaFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveMangaFavorite'
type MangaMock_RemoveMangaFavorite_Call struct {
	*mock.Call
}

// RemoveMangaFavorite is a helper method to define mock.On call
//   - favorite *mangas.MangaFavorite
func (_e *MangaMock_Expecter) RemoveMangaFavorite(favorite interface{}) *MangaMock_RemoveMangaFavorite_Call {
	return &MangaMock_RemoveMangaFavorite_Call{Call: _e.mock.On("RemoveMangaFavorite", favorite)}
}

func (_c *MangaMock_RemoveMangaFavorite_Call) Run(run func(favorite *mangas.MangaFavorite)) *MangaMock_RemoveMangaFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.MangaFavorite))
	})
	return _c
}

func (_c *MangaMock_RemoveMangaFavorite_Call) Return(_a0 error) *MangaMock_RemoveMangaFavorite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MangaMock_RemoveMangaFavorite_Call) RunAndReturn(run func(*mangas.MangaFavorite) error) *MangaMock_RemoveMangaFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// NewMangaMock creates a new instance of MangaMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMangaMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MangaMock {
	mock := &MangaMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
