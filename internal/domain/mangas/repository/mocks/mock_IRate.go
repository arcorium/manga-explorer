// Code generated by mockery v2.40.1. DO NOT EDIT.

package repository

import (
	mangas "manga-explorer/internal/domain/mangas"

	mock "github.com/stretchr/testify/mock"
)

// RateMock is an autogenerated mock type for the IRate type
type RateMock struct {
	mock.Mock
}

type RateMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RateMock) EXPECT() *RateMock_Expecter {
	return &RateMock_Expecter{mock: &_m.Mock}
}

// FindMangaRatings provides a mock function with given fields: mangaId
func (_m *RateMock) FindMangaRatings(mangaId string) ([]mangas.Rate, error) {
	ret := _m.Called(mangaId)

	if len(ret) == 0 {
		panic("no return value specified for FindMangaRatings")
	}

	var r0 []mangas.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]mangas.Rate, error)); ok {
		return rf(mangaId)
	}
	if rf, ok := ret.Get(0).(func(string) []mangas.Rate); ok {
		r0 = rf(mangaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mangas.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mangaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateMock_FindMangaRatings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMangaRatings'
type RateMock_FindMangaRatings_Call struct {
	*mock.Call
}

// FindMangaRatings is a helper method to define mock.On call
//   - mangaId string
func (_e *RateMock_Expecter) FindMangaRatings(mangaId interface{}) *RateMock_FindMangaRatings_Call {
	return &RateMock_FindMangaRatings_Call{Call: _e.mock.On("FindMangaRatings", mangaId)}
}

func (_c *RateMock_FindMangaRatings_Call) Run(run func(mangaId string)) *RateMock_FindMangaRatings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RateMock_FindMangaRatings_Call) Return(_a0 []mangas.Rate, _a1 error) *RateMock_FindMangaRatings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RateMock_FindMangaRatings_Call) RunAndReturn(run func(string) ([]mangas.Rate, error)) *RateMock_FindMangaRatings_Call {
	_c.Call.Return(run)
	return _c
}

// FindRating provides a mock function with given fields: userId, mangaId
func (_m *RateMock) FindRating(userId string, mangaId string) (*mangas.Rate, error) {
	ret := _m.Called(userId, mangaId)

	if len(ret) == 0 {
		panic("no return value specified for FindRating")
	}

	var r0 *mangas.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*mangas.Rate, error)); ok {
		return rf(userId, mangaId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *mangas.Rate); ok {
		r0 = rf(userId, mangaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mangas.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, mangaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateMock_FindRating_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRating'
type RateMock_FindRating_Call struct {
	*mock.Call
}

// FindRating is a helper method to define mock.On call
//   - userId string
//   - mangaId string
func (_e *RateMock_Expecter) FindRating(userId interface{}, mangaId interface{}) *RateMock_FindRating_Call {
	return &RateMock_FindRating_Call{Call: _e.mock.On("FindRating", userId, mangaId)}
}

func (_c *RateMock_FindRating_Call) Run(run func(userId string, mangaId string)) *RateMock_FindRating_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RateMock_FindRating_Call) Return(_a0 *mangas.Rate, _a1 error) *RateMock_FindRating_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RateMock_FindRating_Call) RunAndReturn(run func(string, string) (*mangas.Rate, error)) *RateMock_FindRating_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: rate
func (_m *RateMock) Upsert(rate *mangas.Rate) error {
	ret := _m.Called(rate)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Rate) error); ok {
		r0 = rf(rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RateMock_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type RateMock_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - rate *mangas.Rate
func (_e *RateMock_Expecter) Upsert(rate interface{}) *RateMock_Upsert_Call {
	return &RateMock_Upsert_Call{Call: _e.mock.On("Upsert", rate)}
}

func (_c *RateMock_Upsert_Call) Run(run func(rate *mangas.Rate)) *RateMock_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Rate))
	})
	return _c
}

func (_c *RateMock_Upsert_Call) Return(_a0 error) *RateMock_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RateMock_Upsert_Call) RunAndReturn(run func(*mangas.Rate) error) *RateMock_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewRateMock creates a new instance of RateMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateMock {
	mock := &RateMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
