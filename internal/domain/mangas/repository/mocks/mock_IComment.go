// Code generated by mockery v2.40.1. DO NOT EDIT.

package repository

import (
	mangas "manga-explorer/internal/domain/mangas"

	mock "github.com/stretchr/testify/mock"
)

// CommentMock is an autogenerated mock type for the IComment type
type CommentMock struct {
	mock.Mock
}

type CommentMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentMock) EXPECT() *CommentMock_Expecter {
	return &CommentMock_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: comment
func (_m *CommentMock) CreateComment(comment *mangas.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentMock_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type CommentMock_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - comment *mangas.Comment
func (_e *CommentMock_Expecter) CreateComment(comment interface{}) *CommentMock_CreateComment_Call {
	return &CommentMock_CreateComment_Call{Call: _e.mock.On("CreateComment", comment)}
}

func (_c *CommentMock_CreateComment_Call) Run(run func(comment *mangas.Comment)) *CommentMock_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Comment))
	})
	return _c
}

func (_c *CommentMock_CreateComment_Call) Return(_a0 error) *CommentMock_CreateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentMock_CreateComment_Call) RunAndReturn(run func(*mangas.Comment) error) *CommentMock_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: commentId
func (_m *CommentMock) DeleteComment(commentId string) error {
	ret := _m.Called(commentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(commentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentMock_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type CommentMock_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - commentId string
func (_e *CommentMock_Expecter) DeleteComment(commentId interface{}) *CommentMock_DeleteComment_Call {
	return &CommentMock_DeleteComment_Call{Call: _e.mock.On("DeleteComment", commentId)}
}

func (_c *CommentMock_DeleteComment_Call) Run(run func(commentId string)) *CommentMock_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CommentMock_DeleteComment_Call) Return(_a0 error) *CommentMock_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentMock_DeleteComment_Call) RunAndReturn(run func(string) error) *CommentMock_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// EditComment provides a mock function with given fields: comment
func (_m *CommentMock) EditComment(comment *mangas.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for EditComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentMock_EditComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditComment'
type CommentMock_EditComment_Call struct {
	*mock.Call
}

// EditComment is a helper method to define mock.On call
//   - comment *mangas.Comment
func (_e *CommentMock_Expecter) EditComment(comment interface{}) *CommentMock_EditComment_Call {
	return &CommentMock_EditComment_Call{Call: _e.mock.On("EditComment", comment)}
}

func (_c *CommentMock_EditComment_Call) Run(run func(comment *mangas.Comment)) *CommentMock_EditComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Comment))
	})
	return _c
}

func (_c *CommentMock_EditComment_Call) Return(_a0 error) *CommentMock_EditComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentMock_EditComment_Call) RunAndReturn(run func(*mangas.Comment) error) *CommentMock_EditComment_Call {
	_c.Call.Return(run)
	return _c
}

// FindChapterComments provides a mock function with given fields: chapterId
func (_m *CommentMock) FindChapterComments(chapterId string) ([]mangas.Comment, error) {
	ret := _m.Called(chapterId)

	if len(ret) == 0 {
		panic("no return value specified for FindChapterComments")
	}

	var r0 []mangas.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]mangas.Comment, error)); ok {
		return rf(chapterId)
	}
	if rf, ok := ret.Get(0).(func(string) []mangas.Comment); ok {
		r0 = rf(chapterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mangas.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chapterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentMock_FindChapterComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindChapterComments'
type CommentMock_FindChapterComments_Call struct {
	*mock.Call
}

// FindChapterComments is a helper method to define mock.On call
//   - chapterId string
func (_e *CommentMock_Expecter) FindChapterComments(chapterId interface{}) *CommentMock_FindChapterComments_Call {
	return &CommentMock_FindChapterComments_Call{Call: _e.mock.On("FindChapterComments", chapterId)}
}

func (_c *CommentMock_FindChapterComments_Call) Run(run func(chapterId string)) *CommentMock_FindChapterComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CommentMock_FindChapterComments_Call) Return(_a0 []mangas.Comment, _a1 error) *CommentMock_FindChapterComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentMock_FindChapterComments_Call) RunAndReturn(run func(string) ([]mangas.Comment, error)) *CommentMock_FindChapterComments_Call {
	_c.Call.Return(run)
	return _c
}

// FindComment provides a mock function with given fields: id
func (_m *CommentMock) FindComment(id string) (*mangas.Comment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindComment")
	}

	var r0 *mangas.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mangas.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *mangas.Comment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mangas.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentMock_FindComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindComment'
type CommentMock_FindComment_Call struct {
	*mock.Call
}

// FindComment is a helper method to define mock.On call
//   - id string
func (_e *CommentMock_Expecter) FindComment(id interface{}) *CommentMock_FindComment_Call {
	return &CommentMock_FindComment_Call{Call: _e.mock.On("FindComment", id)}
}

func (_c *CommentMock_FindComment_Call) Run(run func(id string)) *CommentMock_FindComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CommentMock_FindComment_Call) Return(_a0 *mangas.Comment, _a1 error) *CommentMock_FindComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentMock_FindComment_Call) RunAndReturn(run func(string) (*mangas.Comment, error)) *CommentMock_FindComment_Call {
	_c.Call.Return(run)
	return _c
}

// FindMangaComments provides a mock function with given fields: mangaId
func (_m *CommentMock) FindMangaComments(mangaId string) ([]mangas.Comment, error) {
	ret := _m.Called(mangaId)

	if len(ret) == 0 {
		panic("no return value specified for FindMangaComments")
	}

	var r0 []mangas.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]mangas.Comment, error)); ok {
		return rf(mangaId)
	}
	if rf, ok := ret.Get(0).(func(string) []mangas.Comment); ok {
		r0 = rf(mangaId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mangas.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mangaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentMock_FindMangaComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMangaComments'
type CommentMock_FindMangaComments_Call struct {
	*mock.Call
}

// FindMangaComments is a helper method to define mock.On call
//   - mangaId string
func (_e *CommentMock_Expecter) FindMangaComments(mangaId interface{}) *CommentMock_FindMangaComments_Call {
	return &CommentMock_FindMangaComments_Call{Call: _e.mock.On("FindMangaComments", mangaId)}
}

func (_c *CommentMock_FindMangaComments_Call) Run(run func(mangaId string)) *CommentMock_FindMangaComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CommentMock_FindMangaComments_Call) Return(_a0 []mangas.Comment, _a1 error) *CommentMock_FindMangaComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentMock_FindMangaComments_Call) RunAndReturn(run func(string) ([]mangas.Comment, error)) *CommentMock_FindMangaComments_Call {
	_c.Call.Return(run)
	return _c
}

// FindPageComments provides a mock function with given fields: pageId
func (_m *CommentMock) FindPageComments(pageId string) ([]mangas.Comment, error) {
	ret := _m.Called(pageId)

	if len(ret) == 0 {
		panic("no return value specified for FindPageComments")
	}

	var r0 []mangas.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]mangas.Comment, error)); ok {
		return rf(pageId)
	}
	if rf, ok := ret.Get(0).(func(string) []mangas.Comment); ok {
		r0 = rf(pageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mangas.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentMock_FindPageComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPageComments'
type CommentMock_FindPageComments_Call struct {
	*mock.Call
}

// FindPageComments is a helper method to define mock.On call
//   - pageId string
func (_e *CommentMock_Expecter) FindPageComments(pageId interface{}) *CommentMock_FindPageComments_Call {
	return &CommentMock_FindPageComments_Call{Call: _e.mock.On("FindPageComments", pageId)}
}

func (_c *CommentMock_FindPageComments_Call) Run(run func(pageId string)) *CommentMock_FindPageComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CommentMock_FindPageComments_Call) Return(_a0 []mangas.Comment, _a1 error) *CommentMock_FindPageComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommentMock_FindPageComments_Call) RunAndReturn(run func(string) ([]mangas.Comment, error)) *CommentMock_FindPageComments_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommentMock creates a new instance of CommentMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentMock {
	mock := &CommentMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
