// Code generated by mockery v2.40.1. DO NOT EDIT.

package repository

import (
	mangas "manga-explorer/internal/domain/mangas"

	mock "github.com/stretchr/testify/mock"
)

// GenreMock is an autogenerated mock type for the IGenre type
type GenreMock struct {
	mock.Mock
}

type GenreMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GenreMock) EXPECT() *GenreMock_Expecter {
	return &GenreMock_Expecter{mock: &_m.Mock}
}

// CreateGenre provides a mock function with given fields: genre
func (_m *GenreMock) CreateGenre(genre *mangas.Genre) error {
	ret := _m.Called(genre)

	if len(ret) == 0 {
		panic("no return value specified for CreateGenre")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Genre) error); ok {
		r0 = rf(genre)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenreMock_CreateGenre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGenre'
type GenreMock_CreateGenre_Call struct {
	*mock.Call
}

// CreateGenre is a helper method to define mock.On call
//   - genre *mangas.Genre
func (_e *GenreMock_Expecter) CreateGenre(genre interface{}) *GenreMock_CreateGenre_Call {
	return &GenreMock_CreateGenre_Call{Call: _e.mock.On("CreateGenre", genre)}
}

func (_c *GenreMock_CreateGenre_Call) Run(run func(genre *mangas.Genre)) *GenreMock_CreateGenre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Genre))
	})
	return _c
}

func (_c *GenreMock_CreateGenre_Call) Return(_a0 error) *GenreMock_CreateGenre_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenreMock_CreateGenre_Call) RunAndReturn(run func(*mangas.Genre) error) *GenreMock_CreateGenre_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGenreById provides a mock function with given fields: genreId
func (_m *GenreMock) DeleteGenreById(genreId string) error {
	ret := _m.Called(genreId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGenreById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(genreId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenreMock_DeleteGenreById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGenreById'
type GenreMock_DeleteGenreById_Call struct {
	*mock.Call
}

// DeleteGenreById is a helper method to define mock.On call
//   - genreId string
func (_e *GenreMock_Expecter) DeleteGenreById(genreId interface{}) *GenreMock_DeleteGenreById_Call {
	return &GenreMock_DeleteGenreById_Call{Call: _e.mock.On("DeleteGenreById", genreId)}
}

func (_c *GenreMock_DeleteGenreById_Call) Run(run func(genreId string)) *GenreMock_DeleteGenreById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GenreMock_DeleteGenreById_Call) Return(_a0 error) *GenreMock_DeleteGenreById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenreMock_DeleteGenreById_Call) RunAndReturn(run func(string) error) *GenreMock_DeleteGenreById_Call {
	_c.Call.Return(run)
	return _c
}

// ListGenres provides a mock function with given fields:
func (_m *GenreMock) ListGenres() ([]mangas.Genre, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListGenres")
	}

	var r0 []mangas.Genre
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]mangas.Genre, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []mangas.Genre); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mangas.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenreMock_ListGenres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGenres'
type GenreMock_ListGenres_Call struct {
	*mock.Call
}

// ListGenres is a helper method to define mock.On call
func (_e *GenreMock_Expecter) ListGenres() *GenreMock_ListGenres_Call {
	return &GenreMock_ListGenres_Call{Call: _e.mock.On("ListGenres")}
}

func (_c *GenreMock_ListGenres_Call) Run(run func()) *GenreMock_ListGenres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenreMock_ListGenres_Call) Return(_a0 []mangas.Genre, _a1 error) *GenreMock_ListGenres_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GenreMock_ListGenres_Call) RunAndReturn(run func() ([]mangas.Genre, error)) *GenreMock_ListGenres_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGenre provides a mock function with given fields: genre
func (_m *GenreMock) UpdateGenre(genre *mangas.Genre) error {
	ret := _m.Called(genre)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGenre")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Genre) error); ok {
		r0 = rf(genre)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenreMock_UpdateGenre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGenre'
type GenreMock_UpdateGenre_Call struct {
	*mock.Call
}

// UpdateGenre is a helper method to define mock.On call
//   - genre *mangas.Genre
func (_e *GenreMock_Expecter) UpdateGenre(genre interface{}) *GenreMock_UpdateGenre_Call {
	return &GenreMock_UpdateGenre_Call{Call: _e.mock.On("UpdateGenre", genre)}
}

func (_c *GenreMock_UpdateGenre_Call) Run(run func(genre *mangas.Genre)) *GenreMock_UpdateGenre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Genre))
	})
	return _c
}

func (_c *GenreMock_UpdateGenre_Call) Return(_a0 error) *GenreMock_UpdateGenre_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenreMock_UpdateGenre_Call) RunAndReturn(run func(*mangas.Genre) error) *GenreMock_UpdateGenre_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenreMock creates a new instance of GenreMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenreMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenreMock {
	mock := &GenreMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
