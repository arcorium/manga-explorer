// Code generated by mockery v2.40.1. DO NOT EDIT.

package repository

import (
	mangas "manga-explorer/internal/domain/mangas"
	infrastructurerepository "manga-explorer/internal/infrastructure/repository"

	mock "github.com/stretchr/testify/mock"
)

// ChapterMock is an autogenerated mock type for the IChapter type
type ChapterMock struct {
	mock.Mock
}

type ChapterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ChapterMock) EXPECT() *ChapterMock_Expecter {
	return &ChapterMock_Expecter{mock: &_m.Mock}
}

// CreateChapter provides a mock function with given fields: chapter
func (_m *ChapterMock) CreateChapter(chapter *mangas.Chapter) error {
	ret := _m.Called(chapter)

	if len(ret) == 0 {
		panic("no return value specified for CreateChapter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Chapter) error); ok {
		r0 = rf(chapter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChapterMock_CreateChapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChapter'
type ChapterMock_CreateChapter_Call struct {
	*mock.Call
}

// CreateChapter is a helper method to define mock.On call
//   - chapter *mangas.Chapter
func (_e *ChapterMock_Expecter) CreateChapter(chapter interface{}) *ChapterMock_CreateChapter_Call {
	return &ChapterMock_CreateChapter_Call{Call: _e.mock.On("CreateChapter", chapter)}
}

func (_c *ChapterMock_CreateChapter_Call) Run(run func(chapter *mangas.Chapter)) *ChapterMock_CreateChapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Chapter))
	})
	return _c
}

func (_c *ChapterMock_CreateChapter_Call) Return(_a0 error) *ChapterMock_CreateChapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_CreateChapter_Call) RunAndReturn(run func(*mangas.Chapter) error) *ChapterMock_CreateChapter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChapter provides a mock function with given fields: chapterId
func (_m *ChapterMock) DeleteChapter(chapterId string) error {
	ret := _m.Called(chapterId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChapter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(chapterId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChapterMock_DeleteChapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChapter'
type ChapterMock_DeleteChapter_Call struct {
	*mock.Call
}

// DeleteChapter is a helper method to define mock.On call
//   - chapterId string
func (_e *ChapterMock_Expecter) DeleteChapter(chapterId interface{}) *ChapterMock_DeleteChapter_Call {
	return &ChapterMock_DeleteChapter_Call{Call: _e.mock.On("DeleteChapter", chapterId)}
}

func (_c *ChapterMock_DeleteChapter_Call) Run(run func(chapterId string)) *ChapterMock_DeleteChapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChapterMock_DeleteChapter_Call) Return(_a0 error) *ChapterMock_DeleteChapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_DeleteChapter_Call) RunAndReturn(run func(string) error) *ChapterMock_DeleteChapter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChapterPages provides a mock function with given fields: chapterId, pages
func (_m *ChapterMock) DeleteChapterPages(chapterId string, pages []uint16) error {
	ret := _m.Called(chapterId, pages)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChapterPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []uint16) error); ok {
		r0 = rf(chapterId, pages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChapterMock_DeleteChapterPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChapterPages'
type ChapterMock_DeleteChapterPages_Call struct {
	*mock.Call
}

// DeleteChapterPages is a helper method to define mock.On call
//   - chapterId string
//   - pages []uint16
func (_e *ChapterMock_Expecter) DeleteChapterPages(chapterId interface{}, pages interface{}) *ChapterMock_DeleteChapterPages_Call {
	return &ChapterMock_DeleteChapterPages_Call{Call: _e.mock.On("DeleteChapterPages", chapterId, pages)}
}

func (_c *ChapterMock_DeleteChapterPages_Call) Run(run func(chapterId string, pages []uint16)) *ChapterMock_DeleteChapterPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]uint16))
	})
	return _c
}

func (_c *ChapterMock_DeleteChapterPages_Call) Return(_a0 error) *ChapterMock_DeleteChapterPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_DeleteChapterPages_Call) RunAndReturn(run func(string, []uint16) error) *ChapterMock_DeleteChapterPages_Call {
	_c.Call.Return(run)
	return _c
}

// EditChapter provides a mock function with given fields: chapter
func (_m *ChapterMock) EditChapter(chapter *mangas.Chapter) error {
	ret := _m.Called(chapter)

	if len(ret) == 0 {
		panic("no return value specified for EditChapter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.Chapter) error); ok {
		r0 = rf(chapter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChapterMock_EditChapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditChapter'
type ChapterMock_EditChapter_Call struct {
	*mock.Call
}

// EditChapter is a helper method to define mock.On call
//   - chapter *mangas.Chapter
func (_e *ChapterMock_Expecter) EditChapter(chapter interface{}) *ChapterMock_EditChapter_Call {
	return &ChapterMock_EditChapter_Call{Call: _e.mock.On("EditChapter", chapter)}
}

func (_c *ChapterMock_EditChapter_Call) Run(run func(chapter *mangas.Chapter)) *ChapterMock_EditChapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.Chapter))
	})
	return _c
}

func (_c *ChapterMock_EditChapter_Call) Return(_a0 error) *ChapterMock_EditChapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_EditChapter_Call) RunAndReturn(run func(*mangas.Chapter) error) *ChapterMock_EditChapter_Call {
	_c.Call.Return(run)
	return _c
}

// FindChapter provides a mock function with given fields: id
func (_m *ChapterMock) FindChapter(id string) (*mangas.Chapter, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindChapter")
	}

	var r0 *mangas.Chapter
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mangas.Chapter, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *mangas.Chapter); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mangas.Chapter)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChapterMock_FindChapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindChapter'
type ChapterMock_FindChapter_Call struct {
	*mock.Call
}

// FindChapter is a helper method to define mock.On call
//   - id string
func (_e *ChapterMock_Expecter) FindChapter(id interface{}) *ChapterMock_FindChapter_Call {
	return &ChapterMock_FindChapter_Call{Call: _e.mock.On("FindChapter", id)}
}

func (_c *ChapterMock_FindChapter_Call) Run(run func(id string)) *ChapterMock_FindChapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChapterMock_FindChapter_Call) Return(_a0 *mangas.Chapter, _a1 error) *ChapterMock_FindChapter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChapterMock_FindChapter_Call) RunAndReturn(run func(string) (*mangas.Chapter, error)) *ChapterMock_FindChapter_Call {
	_c.Call.Return(run)
	return _c
}

// FindMangaChapterHistories provides a mock function with given fields: userId, mangaId, pagedQuery
func (_m *ChapterMock) FindMangaChapterHistories(userId string, mangaId string, pagedQuery infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Chapter], error) {
	ret := _m.Called(userId, mangaId, pagedQuery)

	if len(ret) == 0 {
		panic("no return value specified for FindMangaChapterHistories")
	}

	var r0 infrastructurerepository.PagedQueryResult[[]mangas.Chapter]
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Chapter], error)); ok {
		return rf(userId, mangaId, pagedQuery)
	}
	if rf, ok := ret.Get(0).(func(string, string, infrastructurerepository.QueryParameter) infrastructurerepository.PagedQueryResult[[]mangas.Chapter]); ok {
		r0 = rf(userId, mangaId, pagedQuery)
	} else {
		r0 = ret.Get(0).(infrastructurerepository.PagedQueryResult[[]mangas.Chapter])
	}

	if rf, ok := ret.Get(1).(func(string, string, infrastructurerepository.QueryParameter) error); ok {
		r1 = rf(userId, mangaId, pagedQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChapterMock_FindMangaChapterHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMangaChapterHistories'
type ChapterMock_FindMangaChapterHistories_Call struct {
	*mock.Call
}

// FindMangaChapterHistories is a helper method to define mock.On call
//   - userId string
//   - mangaId string
//   - pagedQuery infrastructurerepository.QueryParameter
func (_e *ChapterMock_Expecter) FindMangaChapterHistories(userId interface{}, mangaId interface{}, pagedQuery interface{}) *ChapterMock_FindMangaChapterHistories_Call {
	return &ChapterMock_FindMangaChapterHistories_Call{Call: _e.mock.On("FindMangaChapterHistories", userId, mangaId, pagedQuery)}
}

func (_c *ChapterMock_FindMangaChapterHistories_Call) Run(run func(userId string, mangaId string, pagedQuery infrastructurerepository.QueryParameter)) *ChapterMock_FindMangaChapterHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(infrastructurerepository.QueryParameter))
	})
	return _c
}

func (_c *ChapterMock_FindMangaChapterHistories_Call) Return(_a0 infrastructurerepository.PagedQueryResult[[]mangas.Chapter], _a1 error) *ChapterMock_FindMangaChapterHistories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChapterMock_FindMangaChapterHistories_Call) RunAndReturn(run func(string, string, infrastructurerepository.QueryParameter) (infrastructurerepository.PagedQueryResult[[]mangas.Chapter], error)) *ChapterMock_FindMangaChapterHistories_Call {
	_c.Call.Return(run)
	return _c
}

// FindPagesDetails provides a mock function with given fields: chapterId, pages
func (_m *ChapterMock) FindPagesDetails(chapterId string, pages []uint16) ([]mangas.Page, error) {
	ret := _m.Called(chapterId, pages)

	if len(ret) == 0 {
		panic("no return value specified for FindPagesDetails")
	}

	var r0 []mangas.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []uint16) ([]mangas.Page, error)); ok {
		return rf(chapterId, pages)
	}
	if rf, ok := ret.Get(0).(func(string, []uint16) []mangas.Page); ok {
		r0 = rf(chapterId, pages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mangas.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []uint16) error); ok {
		r1 = rf(chapterId, pages)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChapterMock_FindPagesDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPagesDetails'
type ChapterMock_FindPagesDetails_Call struct {
	*mock.Call
}

// FindPagesDetails is a helper method to define mock.On call
//   - chapterId string
//   - pages []uint16
func (_e *ChapterMock_Expecter) FindPagesDetails(chapterId interface{}, pages interface{}) *ChapterMock_FindPagesDetails_Call {
	return &ChapterMock_FindPagesDetails_Call{Call: _e.mock.On("FindPagesDetails", chapterId, pages)}
}

func (_c *ChapterMock_FindPagesDetails_Call) Run(run func(chapterId string, pages []uint16)) *ChapterMock_FindPagesDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]uint16))
	})
	return _c
}

func (_c *ChapterMock_FindPagesDetails_Call) Return(_a0 []mangas.Page, _a1 error) *ChapterMock_FindPagesDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChapterMock_FindPagesDetails_Call) RunAndReturn(run func(string, []uint16) ([]mangas.Page, error)) *ChapterMock_FindPagesDetails_Call {
	_c.Call.Return(run)
	return _c
}

// FindVolumeDetails provides a mock function with given fields: volumeId
func (_m *ChapterMock) FindVolumeDetails(volumeId string) (*mangas.Volume, error) {
	ret := _m.Called(volumeId)

	if len(ret) == 0 {
		panic("no return value specified for FindVolumeDetails")
	}

	var r0 *mangas.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mangas.Volume, error)); ok {
		return rf(volumeId)
	}
	if rf, ok := ret.Get(0).(func(string) *mangas.Volume); ok {
		r0 = rf(volumeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mangas.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(volumeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChapterMock_FindVolumeDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindVolumeDetails'
type ChapterMock_FindVolumeDetails_Call struct {
	*mock.Call
}

// FindVolumeDetails is a helper method to define mock.On call
//   - volumeId string
func (_e *ChapterMock_Expecter) FindVolumeDetails(volumeId interface{}) *ChapterMock_FindVolumeDetails_Call {
	return &ChapterMock_FindVolumeDetails_Call{Call: _e.mock.On("FindVolumeDetails", volumeId)}
}

func (_c *ChapterMock_FindVolumeDetails_Call) Run(run func(volumeId string)) *ChapterMock_FindVolumeDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChapterMock_FindVolumeDetails_Call) Return(_a0 *mangas.Volume, _a1 error) *ChapterMock_FindVolumeDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChapterMock_FindVolumeDetails_Call) RunAndReturn(run func(string) (*mangas.Volume, error)) *ChapterMock_FindVolumeDetails_Call {
	_c.Call.Return(run)
	return _c
}

// InsertChapterHistories provides a mock function with given fields: history
func (_m *ChapterMock) InsertChapterHistories(history *mangas.ChapterHistory) error {
	ret := _m.Called(history)

	if len(ret) == 0 {
		panic("no return value specified for InsertChapterHistories")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mangas.ChapterHistory) error); ok {
		r0 = rf(history)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChapterMock_InsertChapterHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertChapterHistories'
type ChapterMock_InsertChapterHistories_Call struct {
	*mock.Call
}

// InsertChapterHistories is a helper method to define mock.On call
//   - history *mangas.ChapterHistory
func (_e *ChapterMock_Expecter) InsertChapterHistories(history interface{}) *ChapterMock_InsertChapterHistories_Call {
	return &ChapterMock_InsertChapterHistories_Call{Call: _e.mock.On("InsertChapterHistories", history)}
}

func (_c *ChapterMock_InsertChapterHistories_Call) Run(run func(history *mangas.ChapterHistory)) *ChapterMock_InsertChapterHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mangas.ChapterHistory))
	})
	return _c
}

func (_c *ChapterMock_InsertChapterHistories_Call) Return(_a0 error) *ChapterMock_InsertChapterHistories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_InsertChapterHistories_Call) RunAndReturn(run func(*mangas.ChapterHistory) error) *ChapterMock_InsertChapterHistories_Call {
	_c.Call.Return(run)
	return _c
}

// InsertChapterPages provides a mock function with given fields: pages
func (_m *ChapterMock) InsertChapterPages(pages []mangas.Page) error {
	ret := _m.Called(pages)

	if len(ret) == 0 {
		panic("no return value specified for InsertChapterPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]mangas.Page) error); ok {
		r0 = rf(pages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChapterMock_InsertChapterPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertChapterPages'
type ChapterMock_InsertChapterPages_Call struct {
	*mock.Call
}

// InsertChapterPages is a helper method to define mock.On call
//   - pages []mangas.Page
func (_e *ChapterMock_Expecter) InsertChapterPages(pages interface{}) *ChapterMock_InsertChapterPages_Call {
	return &ChapterMock_InsertChapterPages_Call{Call: _e.mock.On("InsertChapterPages", pages)}
}

func (_c *ChapterMock_InsertChapterPages_Call) Run(run func(pages []mangas.Page)) *ChapterMock_InsertChapterPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]mangas.Page))
	})
	return _c
}

func (_c *ChapterMock_InsertChapterPages_Call) Return(_a0 error) *ChapterMock_InsertChapterPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_InsertChapterPages_Call) RunAndReturn(run func([]mangas.Page) error) *ChapterMock_InsertChapterPages_Call {
	_c.Call.Return(run)
	return _c
}

// NewChapterMock creates a new instance of ChapterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChapterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChapterMock {
	mock := &ChapterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
