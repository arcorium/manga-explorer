// Code generated by mockery v2.40.1. DO NOT EDIT.

package service

import (
	dto "manga-explorer/internal/domain/mangas/dto"

	mock "github.com/stretchr/testify/mock"

	status "manga-explorer/internal/app/common/status"
)

// ChapterMock is an autogenerated mock type for the IChapter type
type ChapterMock struct {
	mock.Mock
}

type ChapterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ChapterMock) EXPECT() *ChapterMock_Expecter {
	return &ChapterMock_Expecter{mock: &_m.Mock}
}

// CreateChapter provides a mock function with given fields: input
func (_m *ChapterMock) CreateChapter(input *dto.ChapterCreateInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateChapter")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ChapterCreateInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ChapterMock_CreateChapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChapter'
type ChapterMock_CreateChapter_Call struct {
	*mock.Call
}

// CreateChapter is a helper method to define mock.On call
//   - input *dto.ChapterCreateInput
func (_e *ChapterMock_Expecter) CreateChapter(input interface{}) *ChapterMock_CreateChapter_Call {
	return &ChapterMock_CreateChapter_Call{Call: _e.mock.On("CreateChapter", input)}
}

func (_c *ChapterMock_CreateChapter_Call) Run(run func(input *dto.ChapterCreateInput)) *ChapterMock_CreateChapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ChapterCreateInput))
	})
	return _c
}

func (_c *ChapterMock_CreateChapter_Call) Return(_a0 status.Object) *ChapterMock_CreateChapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_CreateChapter_Call) RunAndReturn(run func(*dto.ChapterCreateInput) status.Object) *ChapterMock_CreateChapter_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChapterComment provides a mock function with given fields: input
func (_m *ChapterMock) CreateChapterComment(input *dto.ChapterCommentCreateInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateChapterComment")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ChapterCommentCreateInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ChapterMock_CreateChapterComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChapterComment'
type ChapterMock_CreateChapterComment_Call struct {
	*mock.Call
}

// CreateChapterComment is a helper method to define mock.On call
//   - input *dto.ChapterCommentCreateInput
func (_e *ChapterMock_Expecter) CreateChapterComment(input interface{}) *ChapterMock_CreateChapterComment_Call {
	return &ChapterMock_CreateChapterComment_Call{Call: _e.mock.On("CreateChapterComment", input)}
}

func (_c *ChapterMock_CreateChapterComment_Call) Run(run func(input *dto.ChapterCommentCreateInput)) *ChapterMock_CreateChapterComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ChapterCommentCreateInput))
	})
	return _c
}

func (_c *ChapterMock_CreateChapterComment_Call) Return(_a0 status.Object) *ChapterMock_CreateChapterComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_CreateChapterComment_Call) RunAndReturn(run func(*dto.ChapterCommentCreateInput) status.Object) *ChapterMock_CreateChapterComment_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePageComment provides a mock function with given fields: input
func (_m *ChapterMock) CreatePageComment(input *dto.PageCommentCreateInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreatePageComment")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.PageCommentCreateInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ChapterMock_CreatePageComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePageComment'
type ChapterMock_CreatePageComment_Call struct {
	*mock.Call
}

// CreatePageComment is a helper method to define mock.On call
//   - input *dto.PageCommentCreateInput
func (_e *ChapterMock_Expecter) CreatePageComment(input interface{}) *ChapterMock_CreatePageComment_Call {
	return &ChapterMock_CreatePageComment_Call{Call: _e.mock.On("CreatePageComment", input)}
}

func (_c *ChapterMock_CreatePageComment_Call) Run(run func(input *dto.PageCommentCreateInput)) *ChapterMock_CreatePageComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.PageCommentCreateInput))
	})
	return _c
}

func (_c *ChapterMock_CreatePageComment_Call) Return(_a0 status.Object) *ChapterMock_CreatePageComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_CreatePageComment_Call) RunAndReturn(run func(*dto.PageCommentCreateInput) status.Object) *ChapterMock_CreatePageComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChapter provides a mock function with given fields: chapterId
func (_m *ChapterMock) DeleteChapter(chapterId string) status.Object {
	ret := _m.Called(chapterId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChapter")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(string) status.Object); ok {
		r0 = rf(chapterId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ChapterMock_DeleteChapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChapter'
type ChapterMock_DeleteChapter_Call struct {
	*mock.Call
}

// DeleteChapter is a helper method to define mock.On call
//   - chapterId string
func (_e *ChapterMock_Expecter) DeleteChapter(chapterId interface{}) *ChapterMock_DeleteChapter_Call {
	return &ChapterMock_DeleteChapter_Call{Call: _e.mock.On("DeleteChapter", chapterId)}
}

func (_c *ChapterMock_DeleteChapter_Call) Run(run func(chapterId string)) *ChapterMock_DeleteChapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChapterMock_DeleteChapter_Call) Return(_a0 status.Object) *ChapterMock_DeleteChapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_DeleteChapter_Call) RunAndReturn(run func(string) status.Object) *ChapterMock_DeleteChapter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChapterPages provides a mock function with given fields: input
func (_m *ChapterMock) DeleteChapterPages(input *dto.PageDeleteInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChapterPages")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.PageDeleteInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ChapterMock_DeleteChapterPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChapterPages'
type ChapterMock_DeleteChapterPages_Call struct {
	*mock.Call
}

// DeleteChapterPages is a helper method to define mock.On call
//   - input *dto.PageDeleteInput
func (_e *ChapterMock_Expecter) DeleteChapterPages(input interface{}) *ChapterMock_DeleteChapterPages_Call {
	return &ChapterMock_DeleteChapterPages_Call{Call: _e.mock.On("DeleteChapterPages", input)}
}

func (_c *ChapterMock_DeleteChapterPages_Call) Run(run func(input *dto.PageDeleteInput)) *ChapterMock_DeleteChapterPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.PageDeleteInput))
	})
	return _c
}

func (_c *ChapterMock_DeleteChapterPages_Call) Return(_a0 status.Object) *ChapterMock_DeleteChapterPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_DeleteChapterPages_Call) RunAndReturn(run func(*dto.PageDeleteInput) status.Object) *ChapterMock_DeleteChapterPages_Call {
	_c.Call.Return(run)
	return _c
}

// EditChapter provides a mock function with given fields: input
func (_m *ChapterMock) EditChapter(input *dto.ChapterEditInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for EditChapter")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ChapterEditInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ChapterMock_EditChapter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditChapter'
type ChapterMock_EditChapter_Call struct {
	*mock.Call
}

// EditChapter is a helper method to define mock.On call
//   - input *dto.ChapterEditInput
func (_e *ChapterMock_Expecter) EditChapter(input interface{}) *ChapterMock_EditChapter_Call {
	return &ChapterMock_EditChapter_Call{Call: _e.mock.On("EditChapter", input)}
}

func (_c *ChapterMock_EditChapter_Call) Run(run func(input *dto.ChapterEditInput)) *ChapterMock_EditChapter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ChapterEditInput))
	})
	return _c
}

func (_c *ChapterMock_EditChapter_Call) Return(_a0 status.Object) *ChapterMock_EditChapter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_EditChapter_Call) RunAndReturn(run func(*dto.ChapterEditInput) status.Object) *ChapterMock_EditChapter_Call {
	_c.Call.Return(run)
	return _c
}

// FindChapterComments provides a mock function with given fields: chapterId
func (_m *ChapterMock) FindChapterComments(chapterId string) ([]dto.CommentResponse, status.Object) {
	ret := _m.Called(chapterId)

	if len(ret) == 0 {
		panic("no return value specified for FindChapterComments")
	}

	var r0 []dto.CommentResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string) ([]dto.CommentResponse, status.Object)); ok {
		return rf(chapterId)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.CommentResponse); ok {
		r0 = rf(chapterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) status.Object); ok {
		r1 = rf(chapterId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// ChapterMock_FindChapterComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindChapterComments'
type ChapterMock_FindChapterComments_Call struct {
	*mock.Call
}

// FindChapterComments is a helper method to define mock.On call
//   - chapterId string
func (_e *ChapterMock_Expecter) FindChapterComments(chapterId interface{}) *ChapterMock_FindChapterComments_Call {
	return &ChapterMock_FindChapterComments_Call{Call: _e.mock.On("FindChapterComments", chapterId)}
}

func (_c *ChapterMock_FindChapterComments_Call) Run(run func(chapterId string)) *ChapterMock_FindChapterComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChapterMock_FindChapterComments_Call) Return(_a0 []dto.CommentResponse, _a1 status.Object) *ChapterMock_FindChapterComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChapterMock_FindChapterComments_Call) RunAndReturn(run func(string) ([]dto.CommentResponse, status.Object)) *ChapterMock_FindChapterComments_Call {
	_c.Call.Return(run)
	return _c
}

// FindChapterPages provides a mock function with given fields: chapterId
func (_m *ChapterMock) FindChapterPages(chapterId string) ([]dto.PageResponse, status.Object) {
	ret := _m.Called(chapterId)

	if len(ret) == 0 {
		panic("no return value specified for FindChapterPages")
	}

	var r0 []dto.PageResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string) ([]dto.PageResponse, status.Object)); ok {
		return rf(chapterId)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.PageResponse); ok {
		r0 = rf(chapterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.PageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) status.Object); ok {
		r1 = rf(chapterId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// ChapterMock_FindChapterPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindChapterPages'
type ChapterMock_FindChapterPages_Call struct {
	*mock.Call
}

// FindChapterPages is a helper method to define mock.On call
//   - chapterId string
func (_e *ChapterMock_Expecter) FindChapterPages(chapterId interface{}) *ChapterMock_FindChapterPages_Call {
	return &ChapterMock_FindChapterPages_Call{Call: _e.mock.On("FindChapterPages", chapterId)}
}

func (_c *ChapterMock_FindChapterPages_Call) Run(run func(chapterId string)) *ChapterMock_FindChapterPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChapterMock_FindChapterPages_Call) Return(_a0 []dto.PageResponse, _a1 status.Object) *ChapterMock_FindChapterPages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChapterMock_FindChapterPages_Call) RunAndReturn(run func(string) ([]dto.PageResponse, status.Object)) *ChapterMock_FindChapterPages_Call {
	_c.Call.Return(run)
	return _c
}

// FindPageComments provides a mock function with given fields: pageId
func (_m *ChapterMock) FindPageComments(pageId string) ([]dto.CommentResponse, status.Object) {
	ret := _m.Called(pageId)

	if len(ret) == 0 {
		panic("no return value specified for FindPageComments")
	}

	var r0 []dto.CommentResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string) ([]dto.CommentResponse, status.Object)); ok {
		return rf(pageId)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.CommentResponse); ok {
		r0 = rf(pageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) status.Object); ok {
		r1 = rf(pageId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// ChapterMock_FindPageComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPageComments'
type ChapterMock_FindPageComments_Call struct {
	*mock.Call
}

// FindPageComments is a helper method to define mock.On call
//   - pageId string
func (_e *ChapterMock_Expecter) FindPageComments(pageId interface{}) *ChapterMock_FindPageComments_Call {
	return &ChapterMock_FindPageComments_Call{Call: _e.mock.On("FindPageComments", pageId)}
}

func (_c *ChapterMock_FindPageComments_Call) Run(run func(pageId string)) *ChapterMock_FindPageComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChapterMock_FindPageComments_Call) Return(_a0 []dto.CommentResponse, _a1 status.Object) *ChapterMock_FindPageComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChapterMock_FindPageComments_Call) RunAndReturn(run func(string) ([]dto.CommentResponse, status.Object)) *ChapterMock_FindPageComments_Call {
	_c.Call.Return(run)
	return _c
}

// FindVolumeChapters provides a mock function with given fields: volumeId
func (_m *ChapterMock) FindVolumeChapters(volumeId string) ([]dto.ChapterResponse, status.Object) {
	ret := _m.Called(volumeId)

	if len(ret) == 0 {
		panic("no return value specified for FindVolumeChapters")
	}

	var r0 []dto.ChapterResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string) ([]dto.ChapterResponse, status.Object)); ok {
		return rf(volumeId)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.ChapterResponse); ok {
		r0 = rf(volumeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ChapterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) status.Object); ok {
		r1 = rf(volumeId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// ChapterMock_FindVolumeChapters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindVolumeChapters'
type ChapterMock_FindVolumeChapters_Call struct {
	*mock.Call
}

// FindVolumeChapters is a helper method to define mock.On call
//   - volumeId string
func (_e *ChapterMock_Expecter) FindVolumeChapters(volumeId interface{}) *ChapterMock_FindVolumeChapters_Call {
	return &ChapterMock_FindVolumeChapters_Call{Call: _e.mock.On("FindVolumeChapters", volumeId)}
}

func (_c *ChapterMock_FindVolumeChapters_Call) Run(run func(volumeId string)) *ChapterMock_FindVolumeChapters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChapterMock_FindVolumeChapters_Call) Return(_a0 []dto.ChapterResponse, _a1 status.Object) *ChapterMock_FindVolumeChapters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChapterMock_FindVolumeChapters_Call) RunAndReturn(run func(string) ([]dto.ChapterResponse, status.Object)) *ChapterMock_FindVolumeChapters_Call {
	_c.Call.Return(run)
	return _c
}

// InsertChapterPage provides a mock function with given fields: input
func (_m *ChapterMock) InsertChapterPage(input *dto.PageCreateInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for InsertChapterPage")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.PageCreateInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// ChapterMock_InsertChapterPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertChapterPage'
type ChapterMock_InsertChapterPage_Call struct {
	*mock.Call
}

// InsertChapterPage is a helper method to define mock.On call
//   - input *dto.PageCreateInput
func (_e *ChapterMock_Expecter) InsertChapterPage(input interface{}) *ChapterMock_InsertChapterPage_Call {
	return &ChapterMock_InsertChapterPage_Call{Call: _e.mock.On("InsertChapterPage", input)}
}

func (_c *ChapterMock_InsertChapterPage_Call) Run(run func(input *dto.PageCreateInput)) *ChapterMock_InsertChapterPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.PageCreateInput))
	})
	return _c
}

func (_c *ChapterMock_InsertChapterPage_Call) Return(_a0 status.Object) *ChapterMock_InsertChapterPage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChapterMock_InsertChapterPage_Call) RunAndReturn(run func(*dto.PageCreateInput) status.Object) *ChapterMock_InsertChapterPage_Call {
	_c.Call.Return(run)
	return _c
}

// NewChapterMock creates a new instance of ChapterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChapterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChapterMock {
	mock := &ChapterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
