// Code generated by mockery v2.40.1. DO NOT EDIT.

package service

import (
	dto "manga-explorer/internal/domain/mangas/dto"

	mock "github.com/stretchr/testify/mock"

	status "manga-explorer/internal/common/status"
)

// GenreMock is an autogenerated mock type for the IGenre type
type GenreMock struct {
	mock.Mock
}

type GenreMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GenreMock) EXPECT() *GenreMock_Expecter {
	return &GenreMock_Expecter{mock: &_m.Mock}
}

// CreateGenre provides a mock function with given fields: input
func (_m *GenreMock) CreateGenre(input dto.GenreCreateInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateGenre")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(dto.GenreCreateInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// GenreMock_CreateGenre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGenre'
type GenreMock_CreateGenre_Call struct {
	*mock.Call
}

// CreateGenre is a helper method to define mock.On call
//   - input dto.GenreCreateInput
func (_e *GenreMock_Expecter) CreateGenre(input interface{}) *GenreMock_CreateGenre_Call {
	return &GenreMock_CreateGenre_Call{Call: _e.mock.On("CreateGenre", input)}
}

func (_c *GenreMock_CreateGenre_Call) Run(run func(input dto.GenreCreateInput)) *GenreMock_CreateGenre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.GenreCreateInput))
	})
	return _c
}

func (_c *GenreMock_CreateGenre_Call) Return(_a0 status.Object) *GenreMock_CreateGenre_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenreMock_CreateGenre_Call) RunAndReturn(run func(dto.GenreCreateInput) status.Object) *GenreMock_CreateGenre_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGenre provides a mock function with given fields: genreId
func (_m *GenreMock) DeleteGenre(genreId string) status.Object {
	ret := _m.Called(genreId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGenre")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(string) status.Object); ok {
		r0 = rf(genreId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// GenreMock_DeleteGenre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGenre'
type GenreMock_DeleteGenre_Call struct {
	*mock.Call
}

// DeleteGenre is a helper method to define mock.On call
//   - genreId string
func (_e *GenreMock_Expecter) DeleteGenre(genreId interface{}) *GenreMock_DeleteGenre_Call {
	return &GenreMock_DeleteGenre_Call{Call: _e.mock.On("DeleteGenre", genreId)}
}

func (_c *GenreMock_DeleteGenre_Call) Run(run func(genreId string)) *GenreMock_DeleteGenre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GenreMock_DeleteGenre_Call) Return(_a0 status.Object) *GenreMock_DeleteGenre_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenreMock_DeleteGenre_Call) RunAndReturn(run func(string) status.Object) *GenreMock_DeleteGenre_Call {
	_c.Call.Return(run)
	return _c
}

// ListGenre provides a mock function with given fields:
func (_m *GenreMock) ListGenre() ([]dto.GenreResponse, status.Object) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListGenre")
	}

	var r0 []dto.GenreResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func() ([]dto.GenreResponse, status.Object)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.GenreResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GenreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() status.Object); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// GenreMock_ListGenre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGenre'
type GenreMock_ListGenre_Call struct {
	*mock.Call
}

// ListGenre is a helper method to define mock.On call
func (_e *GenreMock_Expecter) ListGenre() *GenreMock_ListGenre_Call {
	return &GenreMock_ListGenre_Call{Call: _e.mock.On("ListGenre")}
}

func (_c *GenreMock_ListGenre_Call) Run(run func()) *GenreMock_ListGenre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GenreMock_ListGenre_Call) Return(_a0 []dto.GenreResponse, _a1 status.Object) *GenreMock_ListGenre_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GenreMock_ListGenre_Call) RunAndReturn(run func() ([]dto.GenreResponse, status.Object)) *GenreMock_ListGenre_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGenre provides a mock function with given fields: input
func (_m *GenreMock) UpdateGenre(input *dto.GenreEditInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGenre")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.GenreEditInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// GenreMock_UpdateGenre_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGenre'
type GenreMock_UpdateGenre_Call struct {
	*mock.Call
}

// UpdateGenre is a helper method to define mock.On call
//   - input *dto.GenreEditInput
func (_e *GenreMock_Expecter) UpdateGenre(input interface{}) *GenreMock_UpdateGenre_Call {
	return &GenreMock_UpdateGenre_Call{Call: _e.mock.On("UpdateGenre", input)}
}

func (_c *GenreMock_UpdateGenre_Call) Run(run func(input *dto.GenreEditInput)) *GenreMock_UpdateGenre_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.GenreEditInput))
	})
	return _c
}

func (_c *GenreMock_UpdateGenre_Call) Return(_a0 status.Object) *GenreMock_UpdateGenre_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GenreMock_UpdateGenre_Call) RunAndReturn(run func(*dto.GenreEditInput) status.Object) *GenreMock_UpdateGenre_Call {
	_c.Call.Return(run)
	return _c
}

// NewGenreMock creates a new instance of GenreMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenreMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenreMock {
	mock := &GenreMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
