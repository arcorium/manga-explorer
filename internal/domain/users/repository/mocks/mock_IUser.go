// Code generated by mockery v2.40.1. DO NOT EDIT.

package repository

import (
	users "manga-explorer/internal/domain/users"

	mock "github.com/stretchr/testify/mock"
)

// UserMock is an autogenerated mock type for the IUser type
type UserMock struct {
	mock.Mock
}

type UserMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserMock) EXPECT() *UserMock_Expecter {
	return &UserMock_Expecter{mock: &_m.Mock}
}

// CreateProfile provides a mock function with given fields: profile
func (_m *UserMock) CreateProfile(profile *users.Profile) error {
	ret := _m.Called(profile)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.Profile) error); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMock_CreateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProfile'
type UserMock_CreateProfile_Call struct {
	*mock.Call
}

// CreateProfile is a helper method to define mock.On call
//   - profile *users.Profile
func (_e *UserMock_Expecter) CreateProfile(profile interface{}) *UserMock_CreateProfile_Call {
	return &UserMock_CreateProfile_Call{Call: _e.mock.On("CreateProfile", profile)}
}

func (_c *UserMock_CreateProfile_Call) Run(run func(profile *users.Profile)) *UserMock_CreateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*users.Profile))
	})
	return _c
}

func (_c *UserMock_CreateProfile_Call) Return(_a0 error) *UserMock_CreateProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_CreateProfile_Call) RunAndReturn(run func(*users.Profile) error) *UserMock_CreateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: user, profile
func (_m *UserMock) CreateUser(user *users.User, profile *users.Profile) error {
	ret := _m.Called(user, profile)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.User, *users.Profile) error); ok {
		r0 = rf(user, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMock_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserMock_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *users.User
//   - profile *users.Profile
func (_e *UserMock_Expecter) CreateUser(user interface{}, profile interface{}) *UserMock_CreateUser_Call {
	return &UserMock_CreateUser_Call{Call: _e.mock.On("CreateUser", user, profile)}
}

func (_c *UserMock_CreateUser_Call) Run(run func(user *users.User, profile *users.Profile)) *UserMock_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*users.User), args[1].(*users.Profile))
	})
	return _c
}

func (_c *UserMock_CreateUser_Call) Return(_a0 error) *UserMock_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_CreateUser_Call) RunAndReturn(run func(*users.User, *users.Profile) error) *UserMock_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: userId
func (_m *UserMock) DeleteUser(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMock_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserMock_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - userId string
func (_e *UserMock_Expecter) DeleteUser(userId interface{}) *UserMock_DeleteUser_Call {
	return &UserMock_DeleteUser_Call{Call: _e.mock.On("DeleteUser", userId)}
}

func (_c *UserMock_DeleteUser_Call) Run(run func(userId string)) *UserMock_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_DeleteUser_Call) Return(_a0 error) *UserMock_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_DeleteUser_Call) RunAndReturn(run func(string) error) *UserMock_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function with given fields: email
func (_m *UserMock) FindUserByEmail(email string) (*users.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*users.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *users.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMock_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type UserMock_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *UserMock_Expecter) FindUserByEmail(email interface{}) *UserMock_FindUserByEmail_Call {
	return &UserMock_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", email)}
}

func (_c *UserMock_FindUserByEmail_Call) Run(run func(email string)) *UserMock_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_FindUserByEmail_Call) Return(_a0 *users.User, _a1 error) *UserMock_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_FindUserByEmail_Call) RunAndReturn(run func(string) (*users.User, error)) *UserMock_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserById provides a mock function with given fields: userId
func (_m *UserMock) FindUserById(userId string) (*users.User, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserById")
	}

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*users.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *users.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMock_FindUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserById'
type UserMock_FindUserById_Call struct {
	*mock.Call
}

// FindUserById is a helper method to define mock.On call
//   - userId string
func (_e *UserMock_Expecter) FindUserById(userId interface{}) *UserMock_FindUserById_Call {
	return &UserMock_FindUserById_Call{Call: _e.mock.On("FindUserById", userId)}
}

func (_c *UserMock_FindUserById_Call) Run(run func(userId string)) *UserMock_FindUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_FindUserById_Call) Return(_a0 *users.User, _a1 error) *UserMock_FindUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_FindUserById_Call) RunAndReturn(run func(string) (*users.User, error)) *UserMock_FindUserById_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserProfiles provides a mock function with given fields: userId
func (_m *UserMock) FindUserProfiles(userId string) (*users.Profile, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserProfiles")
	}

	var r0 *users.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*users.Profile, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) *users.Profile); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMock_FindUserProfiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserProfiles'
type UserMock_FindUserProfiles_Call struct {
	*mock.Call
}

// FindUserProfiles is a helper method to define mock.On call
//   - userId string
func (_e *UserMock_Expecter) FindUserProfiles(userId interface{}) *UserMock_FindUserProfiles_Call {
	return &UserMock_FindUserProfiles_Call{Call: _e.mock.On("FindUserProfiles", userId)}
}

func (_c *UserMock_FindUserProfiles_Call) Run(run func(userId string)) *UserMock_FindUserProfiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_FindUserProfiles_Call) Return(_a0 *users.Profile, _a1 error) *UserMock_FindUserProfiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_FindUserProfiles_Call) RunAndReturn(run func(string) (*users.Profile, error)) *UserMock_FindUserProfiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserMock) GetAllUsers() ([]users.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []users.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]users.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []users.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMock_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type UserMock_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *UserMock_Expecter) GetAllUsers() *UserMock_GetAllUsers_Call {
	return &UserMock_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *UserMock_GetAllUsers_Call) Run(run func()) *UserMock_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserMock_GetAllUsers_Call) Return(_a0 []users.User, _a1 error) *UserMock_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_GetAllUsers_Call) RunAndReturn(run func() ([]users.User, error)) *UserMock_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: profile
func (_m *UserMock) UpdateProfileByUserId(profile *users.Profile) error {
	ret := _m.Called(profile)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfileByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.Profile) error); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMock_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfileByUserId'
type UserMock_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - profile *users.Profile
func (_e *UserMock_Expecter) UpdateProfile(profile interface{}) *UserMock_UpdateProfile_Call {
	return &UserMock_UpdateProfile_Call{Call: _e.mock.On("UpdateProfileByUserId", profile)}
}

func (_c *UserMock_UpdateProfile_Call) Run(run func(profile *users.Profile)) *UserMock_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*users.Profile))
	})
	return _c
}

func (_c *UserMock_UpdateProfile_Call) Return(_a0 error) *UserMock_UpdateProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_UpdateProfile_Call) RunAndReturn(run func(*users.Profile) error) *UserMock_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserMock) UpdateUser(user *users.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMock_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserMock_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *users.User
func (_e *UserMock_Expecter) UpdateUser(user interface{}) *UserMock_UpdateUser_Call {
	return &UserMock_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *UserMock_UpdateUser_Call) Run(run func(user *users.User)) *UserMock_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*users.User))
	})
	return _c
}

func (_c *UserMock_UpdateUser_Call) Return(_a0 error) *UserMock_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_UpdateUser_Call) RunAndReturn(run func(*users.User) error) *UserMock_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserMock creates a new instance of UserMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserMock {
	mock := &UserMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
