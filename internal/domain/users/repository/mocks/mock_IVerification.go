// Code generated by mockery v2.38.0. DO NOT EDIT.

package repository

import (
	users "manga-explorer/internal/domain/users"

	mock "github.com/stretchr/testify/mock"
)

// VerificationMock is an autogenerated mock type for the IVerification type
type VerificationMock struct {
	mock.Mock
}

type VerificationMock_Expecter struct {
	mock *mock.Mock
}

func (_m *VerificationMock) EXPECT() *VerificationMock_Expecter {
	return &VerificationMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: verification
func (_m *VerificationMock) Create(verification *users.Verification) error {
	ret := _m.Called(verification)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.Verification) error); ok {
		r0 = rf(verification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerificationMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type VerificationMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - verification *users.Verification
func (_e *VerificationMock_Expecter) Create(verification interface{}) *VerificationMock_Create_Call {
	return &VerificationMock_Create_Call{Call: _e.mock.On("Create", verification)}
}

func (_c *VerificationMock_Create_Call) Run(run func(verification *users.Verification)) *VerificationMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*users.Verification))
	})
	return _c
}

func (_c *VerificationMock_Create_Call) Return(_a0 error) *VerificationMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VerificationMock_Create_Call) RunAndReturn(run func(*users.Verification) error) *VerificationMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: token
func (_m *VerificationMock) Find(token string) (users.Verification, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 users.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (users.Verification, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) users.Verification); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(users.Verification)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerificationMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type VerificationMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - token string
func (_e *VerificationMock_Expecter) Find(token interface{}) *VerificationMock_Find_Call {
	return &VerificationMock_Find_Call{Call: _e.mock.On("Find", token)}
}

func (_c *VerificationMock_Find_Call) Run(run func(token string)) *VerificationMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *VerificationMock_Find_Call) Return(_a0 users.Verification, _a1 error) *VerificationMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerificationMock_Find_Call) RunAndReturn(run func(string) (users.Verification, error)) *VerificationMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: token
func (_m *VerificationMock) Remove(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerificationMock_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type VerificationMock_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - token string
func (_e *VerificationMock_Expecter) Remove(token interface{}) *VerificationMock_Remove_Call {
	return &VerificationMock_Remove_Call{Call: _e.mock.On("Remove", token)}
}

func (_c *VerificationMock_Remove_Call) Run(run func(token string)) *VerificationMock_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *VerificationMock_Remove_Call) Return(_a0 error) *VerificationMock_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VerificationMock_Remove_Call) RunAndReturn(run func(string) error) *VerificationMock_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// NewVerificationMock creates a new instance of VerificationMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerificationMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *VerificationMock {
	mock := &VerificationMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
