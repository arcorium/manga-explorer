// Code generated by mockery v2.40.1. DO NOT EDIT.

package service

import (
	dto "manga-explorer/internal/domain/users/dto"

	mock "github.com/stretchr/testify/mock"

	status "manga-explorer/internal/common/status"
)

// UserMock is an autogenerated mock type for the IUser type
type UserMock struct {
	mock.Mock
}

type UserMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserMock) EXPECT() *UserMock_Expecter {
	return &UserMock_Expecter{mock: &_m.Mock}
}

// AddUser provides a mock function with given fields: input
func (_m *UserMock) AddUser(input *dto.AddUserInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.AddUserInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type UserMock_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//   - input *dto.AddUserInput
func (_e *UserMock_Expecter) AddUser(input interface{}) *UserMock_AddUser_Call {
	return &UserMock_AddUser_Call{Call: _e.mock.On("AddUser", input)}
}

func (_c *UserMock_AddUser_Call) Run(run func(input *dto.AddUserInput)) *UserMock_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.AddUserInput))
	})
	return _c
}

func (_c *UserMock_AddUser_Call) Return(_a0 status.Object) *UserMock_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_AddUser_Call) RunAndReturn(run func(*dto.AddUserInput) status.Object) *UserMock_AddUser_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePassword provides a mock function with given fields: input
func (_m *UserMock) ChangePassword(input *dto.ChangePasswordInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ChangePasswordInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type UserMock_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - input *dto.ChangePasswordInput
func (_e *UserMock_Expecter) ChangePassword(input interface{}) *UserMock_ChangePassword_Call {
	return &UserMock_ChangePassword_Call{Call: _e.mock.On("ChangePassword", input)}
}

func (_c *UserMock_ChangePassword_Call) Run(run func(input *dto.ChangePasswordInput)) *UserMock_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ChangePasswordInput))
	})
	return _c
}

func (_c *UserMock_ChangePassword_Call) Return(_a0 status.Object) *UserMock_ChangePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_ChangePassword_Call) RunAndReturn(run func(*dto.ChangePasswordInput) status.Object) *UserMock_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProfileImage provides a mock function with given fields: userId
func (_m *UserMock) DeleteProfileImage(userId string) status.Object {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfileImage")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(string) status.Object); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_DeleteProfileImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProfileImage'
type UserMock_DeleteProfileImage_Call struct {
	*mock.Call
}

// DeleteProfileImage is a helper method to define mock.On call
//   - userId string
func (_e *UserMock_Expecter) DeleteProfileImage(userId interface{}) *UserMock_DeleteProfileImage_Call {
	return &UserMock_DeleteProfileImage_Call{Call: _e.mock.On("DeleteProfileImage", userId)}
}

func (_c *UserMock_DeleteProfileImage_Call) Run(run func(userId string)) *UserMock_DeleteProfileImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_DeleteProfileImage_Call) Return(_a0 status.Object) *UserMock_DeleteProfileImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_DeleteProfileImage_Call) RunAndReturn(run func(string) status.Object) *UserMock_DeleteProfileImage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: userId
func (_m *UserMock) DeleteUser(userId string) status.Object {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(string) status.Object); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserMock_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - userId string
func (_e *UserMock_Expecter) DeleteUser(userId interface{}) *UserMock_DeleteUser_Call {
	return &UserMock_DeleteUser_Call{Call: _e.mock.On("DeleteUser", userId)}
}

func (_c *UserMock_DeleteUser_Call) Run(run func(userId string)) *UserMock_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_DeleteUser_Call) Return(_a0 status.Object) *UserMock_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_DeleteUser_Call) RunAndReturn(run func(string) status.Object) *UserMock_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function with given fields: email
func (_m *UserMock) FindUserByEmail(email string) (dto.UserResponse, status.Object) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 dto.UserResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string) (dto.UserResponse, status.Object)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) dto.UserResponse); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(dto.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(string) status.Object); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// UserMock_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type UserMock_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *UserMock_Expecter) FindUserByEmail(email interface{}) *UserMock_FindUserByEmail_Call {
	return &UserMock_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", email)}
}

func (_c *UserMock_FindUserByEmail_Call) Run(run func(email string)) *UserMock_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_FindUserByEmail_Call) Return(_a0 dto.UserResponse, _a1 status.Object) *UserMock_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_FindUserByEmail_Call) RunAndReturn(run func(string) (dto.UserResponse, status.Object)) *UserMock_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserById provides a mock function with given fields: id
func (_m *UserMock) FindUserById(id string) (dto.UserResponse, status.Object) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserById")
	}

	var r0 dto.UserResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string) (dto.UserResponse, status.Object)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) dto.UserResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(string) status.Object); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// UserMock_FindUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserById'
type UserMock_FindUserById_Call struct {
	*mock.Call
}

// FindUserById is a helper method to define mock.On call
//   - id string
func (_e *UserMock_Expecter) FindUserById(id interface{}) *UserMock_FindUserById_Call {
	return &UserMock_FindUserById_Call{Call: _e.mock.On("FindUserById", id)}
}

func (_c *UserMock_FindUserById_Call) Run(run func(id string)) *UserMock_FindUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_FindUserById_Call) Return(_a0 dto.UserResponse, _a1 status.Object) *UserMock_FindUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_FindUserById_Call) RunAndReturn(run func(string) (dto.UserResponse, status.Object)) *UserMock_FindUserById_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserProfileById provides a mock function with given fields: userId
func (_m *UserMock) FindUserProfileById(userId string) (dto.ProfileResponse, status.Object) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserProfileById")
	}

	var r0 dto.ProfileResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string) (dto.ProfileResponse, status.Object)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) dto.ProfileResponse); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(dto.ProfileResponse)
	}

	if rf, ok := ret.Get(1).(func(string) status.Object); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// UserMock_FindUserProfileById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserProfileById'
type UserMock_FindUserProfileById_Call struct {
	*mock.Call
}

// FindUserProfileById is a helper method to define mock.On call
//   - userId string
func (_e *UserMock_Expecter) FindUserProfileById(userId interface{}) *UserMock_FindUserProfileById_Call {
	return &UserMock_FindUserProfileById_Call{Call: _e.mock.On("FindUserProfileById", userId)}
}

func (_c *UserMock_FindUserProfileById_Call) Run(run func(userId string)) *UserMock_FindUserProfileById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserMock_FindUserProfileById_Call) Return(_a0 dto.ProfileResponse, _a1 status.Object) *UserMock_FindUserProfileById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_FindUserProfileById_Call) RunAndReturn(run func(string) (dto.ProfileResponse, status.Object)) *UserMock_FindUserProfileById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserMock) GetAllUsers() ([]dto.UserResponse, status.Object) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []dto.UserResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func() ([]dto.UserResponse, status.Object)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.UserResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() status.Object); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// UserMock_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type UserMock_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
func (_e *UserMock_Expecter) GetAllUsers() *UserMock_GetAllUsers_Call {
	return &UserMock_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers")}
}

func (_c *UserMock_GetAllUsers_Call) Run(run func()) *UserMock_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserMock_GetAllUsers_Call) Return(_a0 []dto.UserResponse, _a1 status.Object) *UserMock_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_GetAllUsers_Call) RunAndReturn(run func() ([]dto.UserResponse, status.Object)) *UserMock_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: request
func (_m *UserMock) RegisterUser(request *dto.UserRegisterInput) (dto.UserResponse, status.Object) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 dto.UserResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(*dto.UserRegisterInput) (dto.UserResponse, status.Object)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*dto.UserRegisterInput) dto.UserResponse); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(dto.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(*dto.UserRegisterInput) status.Object); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// UserMock_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type UserMock_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - request *dto.UserRegisterInput
func (_e *UserMock_Expecter) RegisterUser(request interface{}) *UserMock_RegisterUser_Call {
	return &UserMock_RegisterUser_Call{Call: _e.mock.On("RegisterUser", request)}
}

func (_c *UserMock_RegisterUser_Call) Run(run func(request *dto.UserRegisterInput)) *UserMock_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.UserRegisterInput))
	})
	return _c
}

func (_c *UserMock_RegisterUser_Call) Return(_a0 dto.UserResponse, _a1 status.Object) *UserMock_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMock_RegisterUser_Call) RunAndReturn(run func(*dto.UserRegisterInput) (dto.UserResponse, status.Object)) *UserMock_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// RequestEmailVerification provides a mock function with given fields: input
func (_m *UserMock) RequestEmailVerification(input *dto.VerifEmailRequestInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RequestEmailVerification")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.VerifEmailRequestInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_RequestEmailVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestEmailVerification'
type UserMock_RequestEmailVerification_Call struct {
	*mock.Call
}

// RequestEmailVerification is a helper method to define mock.On call
//   - input *dto.VerifEmailRequestInput
func (_e *UserMock_Expecter) RequestEmailVerification(input interface{}) *UserMock_RequestEmailVerification_Call {
	return &UserMock_RequestEmailVerification_Call{Call: _e.mock.On("RequestEmailVerification", input)}
}

func (_c *UserMock_RequestEmailVerification_Call) Run(run func(input *dto.VerifEmailRequestInput)) *UserMock_RequestEmailVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.VerifEmailRequestInput))
	})
	return _c
}

func (_c *UserMock_RequestEmailVerification_Call) Return(_a0 status.Object) *UserMock_RequestEmailVerification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_RequestEmailVerification_Call) RunAndReturn(run func(*dto.VerifEmailRequestInput) status.Object) *UserMock_RequestEmailVerification_Call {
	_c.Call.Return(run)
	return _c
}

// RequestResetPassword provides a mock function with given fields: input
func (_m *UserMock) RequestResetPassword(input *dto.ResetPasswordRequestInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RequestResetPassword")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ResetPasswordRequestInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_RequestResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestResetPassword'
type UserMock_RequestResetPassword_Call struct {
	*mock.Call
}

// RequestResetPassword is a helper method to define mock.On call
//   - input *dto.ResetPasswordRequestInput
func (_e *UserMock_Expecter) RequestResetPassword(input interface{}) *UserMock_RequestResetPassword_Call {
	return &UserMock_RequestResetPassword_Call{Call: _e.mock.On("RequestResetPassword", input)}
}

func (_c *UserMock_RequestResetPassword_Call) Run(run func(input *dto.ResetPasswordRequestInput)) *UserMock_RequestResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ResetPasswordRequestInput))
	})
	return _c
}

func (_c *UserMock_RequestResetPassword_Call) Return(_a0 status.Object) *UserMock_RequestResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_RequestResetPassword_Call) RunAndReturn(run func(*dto.ResetPasswordRequestInput) status.Object) *UserMock_RequestResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function with given fields: input
func (_m *UserMock) ResetPassword(input *dto.ResetPasswordInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ResetPasswordInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type UserMock_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - input *dto.ResetPasswordInput
func (_e *UserMock_Expecter) ResetPassword(input interface{}) *UserMock_ResetPassword_Call {
	return &UserMock_ResetPassword_Call{Call: _e.mock.On("ResetPassword", input)}
}

func (_c *UserMock_ResetPassword_Call) Run(run func(input *dto.ResetPasswordInput)) *UserMock_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ResetPasswordInput))
	})
	return _c
}

func (_c *UserMock_ResetPassword_Call) Return(_a0 status.Object) *UserMock_ResetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_ResetPassword_Call) RunAndReturn(run func(*dto.ResetPasswordInput) status.Object) *UserMock_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: input
func (_m *UserMock) UpdateProfile(input *dto.ProfileUpdateInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfileByUserId")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ProfileUpdateInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfileByUserId'
type UserMock_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - input *dto.ProfileUpdateInput
func (_e *UserMock_Expecter) UpdateProfile(input interface{}) *UserMock_UpdateProfile_Call {
	return &UserMock_UpdateProfile_Call{Call: _e.mock.On("UpdateProfileByUserId", input)}
}

func (_c *UserMock_UpdateProfile_Call) Run(run func(input *dto.ProfileUpdateInput)) *UserMock_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ProfileUpdateInput))
	})
	return _c
}

func (_c *UserMock_UpdateProfile_Call) Return(_a0 status.Object) *UserMock_UpdateProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_UpdateProfile_Call) RunAndReturn(run func(*dto.ProfileUpdateInput) status.Object) *UserMock_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfileExtended provides a mock function with given fields: input
func (_m *UserMock) UpdateProfileExtended(input *dto.ProfileUpdateExtendedInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfileExtended")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ProfileUpdateExtendedInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_UpdateProfileExtended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfileExtended'
type UserMock_UpdateProfileExtended_Call struct {
	*mock.Call
}

// UpdateProfileExtended is a helper method to define mock.On call
//   - input *dto.ProfileUpdateExtendedInput
func (_e *UserMock_Expecter) UpdateProfileExtended(input interface{}) *UserMock_UpdateProfileExtended_Call {
	return &UserMock_UpdateProfileExtended_Call{Call: _e.mock.On("UpdateProfileExtended", input)}
}

func (_c *UserMock_UpdateProfileExtended_Call) Run(run func(input *dto.ProfileUpdateExtendedInput)) *UserMock_UpdateProfileExtended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ProfileUpdateExtendedInput))
	})
	return _c
}

func (_c *UserMock_UpdateProfileExtended_Call) Return(_a0 status.Object) *UserMock_UpdateProfileExtended_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_UpdateProfileExtended_Call) RunAndReturn(run func(*dto.ProfileUpdateExtendedInput) status.Object) *UserMock_UpdateProfileExtended_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfileImage provides a mock function with given fields: input
func (_m *UserMock) UpdateProfileImage(input *dto.ProfileImageUpdateInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfileImage")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.ProfileImageUpdateInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_UpdateProfileImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfileImage'
type UserMock_UpdateProfileImage_Call struct {
	*mock.Call
}

// UpdateProfileImage is a helper method to define mock.On call
//   - input *dto.ProfileImageUpdateInput
func (_e *UserMock_Expecter) UpdateProfileImage(input interface{}) *UserMock_UpdateProfileImage_Call {
	return &UserMock_UpdateProfileImage_Call{Call: _e.mock.On("UpdateProfileImage", input)}
}

func (_c *UserMock_UpdateProfileImage_Call) Run(run func(input *dto.ProfileImageUpdateInput)) *UserMock_UpdateProfileImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.ProfileImageUpdateInput))
	})
	return _c
}

func (_c *UserMock_UpdateProfileImage_Call) Return(_a0 status.Object) *UserMock_UpdateProfileImage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_UpdateProfileImage_Call) RunAndReturn(run func(*dto.ProfileImageUpdateInput) status.Object) *UserMock_UpdateProfileImage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: input
func (_m *UserMock) UpdateUser(input *dto.UserUpdateInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.UserUpdateInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserMock_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - input *dto.UserUpdateInput
func (_e *UserMock_Expecter) UpdateUser(input interface{}) *UserMock_UpdateUser_Call {
	return &UserMock_UpdateUser_Call{Call: _e.mock.On("UpdateUser", input)}
}

func (_c *UserMock_UpdateUser_Call) Run(run func(input *dto.UserUpdateInput)) *UserMock_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.UserUpdateInput))
	})
	return _c
}

func (_c *UserMock_UpdateUser_Call) Return(_a0 status.Object) *UserMock_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_UpdateUser_Call) RunAndReturn(run func(*dto.UserUpdateInput) status.Object) *UserMock_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserExtended provides a mock function with given fields: input
func (_m *UserMock) UpdateUserExtended(input *dto.UserUpdateExtendedInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserExtended")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.UserUpdateExtendedInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_UpdateUserExtended_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserExtended'
type UserMock_UpdateUserExtended_Call struct {
	*mock.Call
}

// UpdateUserExtended is a helper method to define mock.On call
//   - input *dto.UserUpdateExtendedInput
func (_e *UserMock_Expecter) UpdateUserExtended(input interface{}) *UserMock_UpdateUserExtended_Call {
	return &UserMock_UpdateUserExtended_Call{Call: _e.mock.On("UpdateUserExtended", input)}
}

func (_c *UserMock_UpdateUserExtended_Call) Run(run func(input *dto.UserUpdateExtendedInput)) *UserMock_UpdateUserExtended_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.UserUpdateExtendedInput))
	})
	return _c
}

func (_c *UserMock_UpdateUserExtended_Call) Return(_a0 status.Object) *UserMock_UpdateUserExtended_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_UpdateUserExtended_Call) RunAndReturn(run func(*dto.UserUpdateExtendedInput) status.Object) *UserMock_UpdateUserExtended_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function with given fields: input
func (_m *UserMock) VerifyEmail(input *dto.VerifyEmailInput) status.Object {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(*dto.VerifyEmailInput) status.Object); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// UserMock_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type UserMock_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - input *dto.VerifyEmailInput
func (_e *UserMock_Expecter) VerifyEmail(input interface{}) *UserMock_VerifyEmail_Call {
	return &UserMock_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", input)}
}

func (_c *UserMock_VerifyEmail_Call) Run(run func(input *dto.VerifyEmailInput)) *UserMock_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.VerifyEmailInput))
	})
	return _c
}

func (_c *UserMock_VerifyEmail_Call) Return(_a0 status.Object) *UserMock_VerifyEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMock_VerifyEmail_Call) RunAndReturn(run func(*dto.VerifyEmailInput) status.Object) *UserMock_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserMock creates a new instance of UserMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserMock {
	mock := &UserMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
