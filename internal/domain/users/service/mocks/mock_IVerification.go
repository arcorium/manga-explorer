// Code generated by mockery v2.40.1. DO NOT EDIT.

package service

import (
	dto "manga-explorer/internal/domain/users/dto"

	mock "github.com/stretchr/testify/mock"

	status "manga-explorer/internal/common/status"

	users "manga-explorer/internal/domain/users"
)

// VerificationMock is an autogenerated mock type for the IVerification type
type VerificationMock struct {
	mock.Mock
}

type VerificationMock_Expecter struct {
	mock *mock.Mock
}

func (_m *VerificationMock) EXPECT() *VerificationMock_Expecter {
	return &VerificationMock_Expecter{mock: &_m.Mock}
}

// Request provides a mock function with given fields: userId, usage
func (_m *VerificationMock) Request(userId string, usage users.Usage) (dto.VerificationResponse, status.Object) {
	ret := _m.Called(userId, usage)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 dto.VerificationResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string, users.Usage) (dto.VerificationResponse, status.Object)); ok {
		return rf(userId, usage)
	}
	if rf, ok := ret.Get(0).(func(string, users.Usage) dto.VerificationResponse); ok {
		r0 = rf(userId, usage)
	} else {
		r0 = ret.Get(0).(dto.VerificationResponse)
	}

	if rf, ok := ret.Get(1).(func(string, users.Usage) status.Object); ok {
		r1 = rf(userId, usage)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// VerificationMock_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type VerificationMock_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - userId string
//   - usage users.Usage
func (_e *VerificationMock_Expecter) Request(userId interface{}, usage interface{}) *VerificationMock_Request_Call {
	return &VerificationMock_Request_Call{Call: _e.mock.On("Request", userId, usage)}
}

func (_c *VerificationMock_Request_Call) Run(run func(userId string, usage users.Usage)) *VerificationMock_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(users.Usage))
	})
	return _c
}

func (_c *VerificationMock_Request_Call) Return(_a0 dto.VerificationResponse, _a1 status.Object) *VerificationMock_Request_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerificationMock_Request_Call) RunAndReturn(run func(string, users.Usage) (dto.VerificationResponse, status.Object)) *VerificationMock_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with given fields: token, usage
func (_m *VerificationMock) Response(token string, usage users.Usage) (dto.VerificationResponse, status.Object) {
	ret := _m.Called(token, usage)

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 dto.VerificationResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string, users.Usage) (dto.VerificationResponse, status.Object)); ok {
		return rf(token, usage)
	}
	if rf, ok := ret.Get(0).(func(string, users.Usage) dto.VerificationResponse); ok {
		r0 = rf(token, usage)
	} else {
		r0 = ret.Get(0).(dto.VerificationResponse)
	}

	if rf, ok := ret.Get(1).(func(string, users.Usage) status.Object); ok {
		r1 = rf(token, usage)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// VerificationMock_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type VerificationMock_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
//   - token string
//   - usage users.Usage
func (_e *VerificationMock_Expecter) Response(token interface{}, usage interface{}) *VerificationMock_Response_Call {
	return &VerificationMock_Response_Call{Call: _e.mock.On("Response", token, usage)}
}

func (_c *VerificationMock_Response_Call) Run(run func(token string, usage users.Usage)) *VerificationMock_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(users.Usage))
	})
	return _c
}

func (_c *VerificationMock_Response_Call) Return(_a0 dto.VerificationResponse, _a1 status.Object) *VerificationMock_Response_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerificationMock_Response_Call) RunAndReturn(run func(string, users.Usage) (dto.VerificationResponse, status.Object)) *VerificationMock_Response_Call {
	_c.Call.Return(run)
	return _c
}

// NewVerificationMock creates a new instance of VerificationMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerificationMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *VerificationMock {
	mock := &VerificationMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
