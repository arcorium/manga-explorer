// Code generated by mockery v2.40.1. DO NOT EDIT.

package service

import (
	dto "manga-explorer/internal/domain/users/dto"

	mock "github.com/stretchr/testify/mock"

	status "manga-explorer/internal/common/status"
)

// AuthenticationMock is an autogenerated mock type for the IAuthentication type
type AuthenticationMock struct {
	mock.Mock
}

type AuthenticationMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthenticationMock) EXPECT() *AuthenticationMock_Expecter {
	return &AuthenticationMock_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: input
func (_m *AuthenticationMock) Authenticate(input *dto.LoginInput) (dto.LoginResponse, status.Object) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 dto.LoginResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(*dto.LoginInput) (dto.LoginResponse, status.Object)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dto.LoginInput) dto.LoginResponse); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(dto.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(*dto.LoginInput) status.Object); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// AuthenticationMock_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type AuthenticationMock_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - input *dto.LoginInput
func (_e *AuthenticationMock_Expecter) Authenticate(input interface{}) *AuthenticationMock_Authenticate_Call {
	return &AuthenticationMock_Authenticate_Call{Call: _e.mock.On("Authenticate", input)}
}

func (_c *AuthenticationMock_Authenticate_Call) Run(run func(input *dto.LoginInput)) *AuthenticationMock_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.LoginInput))
	})
	return _c
}

func (_c *AuthenticationMock_Authenticate_Call) Return(_a0 dto.LoginResponse, _a1 status.Object) *AuthenticationMock_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthenticationMock_Authenticate_Call) RunAndReturn(run func(*dto.LoginInput) (dto.LoginResponse, status.Object)) *AuthenticationMock_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields: userId
func (_m *AuthenticationMock) GetCredentials(userId string) ([]dto.CredentialResponse, status.Object) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 []dto.CredentialResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(string) ([]dto.CredentialResponse, status.Object)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []dto.CredentialResponse); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CredentialResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) status.Object); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// AuthenticationMock_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type AuthenticationMock_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - userId string
func (_e *AuthenticationMock_Expecter) GetCredentials(userId interface{}) *AuthenticationMock_GetCredentials_Call {
	return &AuthenticationMock_GetCredentials_Call{Call: _e.mock.On("GetCredentials", userId)}
}

func (_c *AuthenticationMock_GetCredentials_Call) Run(run func(userId string)) *AuthenticationMock_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthenticationMock_GetCredentials_Call) Return(_a0 []dto.CredentialResponse, _a1 status.Object) *AuthenticationMock_GetCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthenticationMock_GetCredentials_Call) RunAndReturn(run func(string) ([]dto.CredentialResponse, status.Object)) *AuthenticationMock_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: userId, credId
func (_m *AuthenticationMock) Logout(userId string, credId string) status.Object {
	ret := _m.Called(userId, credId)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(string, string) status.Object); ok {
		r0 = rf(userId, credId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// AuthenticationMock_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthenticationMock_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - userId string
//   - credId string
func (_e *AuthenticationMock_Expecter) Logout(userId interface{}, credId interface{}) *AuthenticationMock_Logout_Call {
	return &AuthenticationMock_Logout_Call{Call: _e.mock.On("Logout", userId, credId)}
}

func (_c *AuthenticationMock_Logout_Call) Run(run func(userId string, credId string)) *AuthenticationMock_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AuthenticationMock_Logout_Call) Return(_a0 status.Object) *AuthenticationMock_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationMock_Logout_Call) RunAndReturn(run func(string, string) status.Object) *AuthenticationMock_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// LogoutDevices provides a mock function with given fields: userId
func (_m *AuthenticationMock) LogoutDevices(userId string) status.Object {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for LogoutDevices")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(string) status.Object); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// AuthenticationMock_LogoutDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogoutDevices'
type AuthenticationMock_LogoutDevices_Call struct {
	*mock.Call
}

// LogoutDevices is a helper method to define mock.On call
//   - userId string
func (_e *AuthenticationMock_Expecter) LogoutDevices(userId interface{}) *AuthenticationMock_LogoutDevices_Call {
	return &AuthenticationMock_LogoutDevices_Call{Call: _e.mock.On("LogoutDevices", userId)}
}

func (_c *AuthenticationMock_LogoutDevices_Call) Run(run func(userId string)) *AuthenticationMock_LogoutDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AuthenticationMock_LogoutDevices_Call) Return(_a0 status.Object) *AuthenticationMock_LogoutDevices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationMock_LogoutDevices_Call) RunAndReturn(run func(string) status.Object) *AuthenticationMock_LogoutDevices_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: input
func (_m *AuthenticationMock) RefreshToken(input *dto.RefreshTokenInput) (dto.RefreshTokenResponse, status.Object) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 dto.RefreshTokenResponse
	var r1 status.Object
	if rf, ok := ret.Get(0).(func(*dto.RefreshTokenInput) (dto.RefreshTokenResponse, status.Object)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dto.RefreshTokenInput) dto.RefreshTokenResponse); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(dto.RefreshTokenResponse)
	}

	if rf, ok := ret.Get(1).(func(*dto.RefreshTokenInput) status.Object); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Get(1).(status.Object)
	}

	return r0, r1
}

// AuthenticationMock_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type AuthenticationMock_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - input *dto.RefreshTokenInput
func (_e *AuthenticationMock_Expecter) RefreshToken(input interface{}) *AuthenticationMock_RefreshToken_Call {
	return &AuthenticationMock_RefreshToken_Call{Call: _e.mock.On("RefreshToken", input)}
}

func (_c *AuthenticationMock_RefreshToken_Call) Run(run func(input *dto.RefreshTokenInput)) *AuthenticationMock_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.RefreshTokenInput))
	})
	return _c
}

func (_c *AuthenticationMock_RefreshToken_Call) Return(_a0 dto.RefreshTokenResponse, _a1 status.Object) *AuthenticationMock_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthenticationMock_RefreshToken_Call) RunAndReturn(run func(*dto.RefreshTokenInput) (dto.RefreshTokenResponse, status.Object)) *AuthenticationMock_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SelfLogout provides a mock function with given fields: userId, accessToken
func (_m *AuthenticationMock) SelfLogout(userId string, accessToken string) status.Object {
	ret := _m.Called(userId, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for SelfLogout")
	}

	var r0 status.Object
	if rf, ok := ret.Get(0).(func(string, string) status.Object); ok {
		r0 = rf(userId, accessToken)
	} else {
		r0 = ret.Get(0).(status.Object)
	}

	return r0
}

// AuthenticationMock_SelfLogout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelfLogout'
type AuthenticationMock_SelfLogout_Call struct {
	*mock.Call
}

// SelfLogout is a helper method to define mock.On call
//   - userId string
//   - accessToken string
func (_e *AuthenticationMock_Expecter) SelfLogout(userId interface{}, accessToken interface{}) *AuthenticationMock_SelfLogout_Call {
	return &AuthenticationMock_SelfLogout_Call{Call: _e.mock.On("SelfLogout", userId, accessToken)}
}

func (_c *AuthenticationMock_SelfLogout_Call) Run(run func(userId string, accessToken string)) *AuthenticationMock_SelfLogout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AuthenticationMock_SelfLogout_Call) Return(_a0 status.Object) *AuthenticationMock_SelfLogout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthenticationMock_SelfLogout_Call) RunAndReturn(run func(string, string) status.Object) *AuthenticationMock_SelfLogout_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthenticationMock creates a new instance of AuthenticationMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticationMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticationMock {
	mock := &AuthenticationMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
